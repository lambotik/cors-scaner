from colorama import Fore, Style, Back
from typing import Dict, List, Optional, Any
from datetime import datetime
import os


def print_report(scan_results: Dict[str, Any]) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

    Args:
        scan_results (Dict): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ scanner.py
    """
    # –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    os.system('cls' if os.name == 'nt' else 'clear')

    print(f"\n{Back.BLUE}{Fore.WHITE}üîê –û–¢–ß–ï–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò HTTP-–ó–ê–ì–û–õ–û–í–ö–û–í {Style.RESET_ALL}")
    print("=" * 70)

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"\n{Fore.CYAN}üéØ –¶–ï–õ–¨ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø:{Style.RESET_ALL}")
    print(f"   URL: {scan_results['target']}")
    print(f"   –§–∏–Ω–∞–ª—å–Ω—ã–π URL: {scan_results.get('final_url', scan_results['target'])}")
    print(f"   –í—Ä–µ–º—è: {scan_results['date']}")
    print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {scan_results['scan_duration']}—Å")
    print(f"   HTTP —Å—Ç–∞—Ç—É—Å: {scan_results['http_status']}")

    # –û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
    score = scan_results['security_score']
    print(f"\n{Fore.CYAN}üìä –û–¶–ï–ù–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:{Style.RESET_ALL}")

    # –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    bars = int(score / 5)
    progress_bar = f"{Fore.GREEN}{'‚ñà' * bars}{Fore.RED}{'‚ñë' * (20 - bars)}{Style.RESET_ALL}"

    if score >= 80:
        color = Fore.GREEN
        level = "–û–¢–õ–ò–ß–ù–û"
        emoji = "üéâ"
    elif score >= 60:
        color = Fore.YELLOW
        level = "–•–û–†–û–®–û"
        emoji = "‚úÖ"
    else:
        color = Fore.RED
        level = "–¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø"
        emoji = "‚ö†Ô∏è"

    print(f"   {progress_bar} {color}{score}% {emoji} - {level}{Style.RESET_ALL}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n{Fore.CYAN}üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:{Style.RESET_ALL}")
    print(f"   üìã –ó–∞–≥–æ–ª–æ–≤–∫–æ–≤: {scan_results['present_headers']}/{scan_results['total_headers']} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    print(f"   üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {scan_results['critical_headers_present']} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    critical_issues = sum(1 for issue in scan_results['issues'] if 'üö®' in issue or '–ö–†–ò–¢–ò–ß–ï–°–ö–û' in issue)
    print(f"   ‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º: {len(scan_results['issues'])} –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ ({critical_issues} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö)")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
    if scan_results.get('server_info'):
        server_info = scan_results['server_info']
        if any(server_info.values()):
            print(f"\n{Fore.CYAN}üñ•Ô∏è  –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ï–†–í–ï–†–ï:{Style.RESET_ALL}")
            if server_info.get('server'):
                print(f"   Server: {server_info['server']}")
            if server_info.get('x_powered_by'):
                print(f"   X-Powered-By: {server_info['x_powered_by']}")

    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    print(f"\n{Fore.CYAN}üõ°Ô∏è  –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–ì–û–õ–û–í–ö–û–í:{Style.RESET_ALL}")
    print("-" * 70)

    for header in scan_results['headers']:
        if header['present']:
            status_icon = f"{Fore.GREEN}‚úÖ{Style.RESET_ALL}"
            status_text = "–ü–†–ò–°–£–¢–°–¢–í–£–ï–¢"
        else:
            status_icon = f"{Fore.RED}‚ùå{Style.RESET_ALL}"
            status_text = "–û–¢–°–£–¢–°–¢–í–£–ï–¢"

        # –¶–≤–µ—Ç —Ä–∏—Å–∫–∞
        if header['risk'] == '–í—ã—Å–æ–∫–∏–π':
            risk_color = Fore.RED
        elif header['risk'] == '–°—Ä–µ–¥–Ω–∏–π':
            risk_color = Fore.YELLOW
        else:
            risk_color = Fore.GREEN

        print(f"\n{status_icon} {Fore.BLUE}{header['name']}{Style.RESET_ALL}")
        print(f"   ‚îî‚îÄ –°—Ç–∞—Ç—É—Å: {status_text}")
        print(f"   ‚îî‚îÄ –†–∏—Å–∫: {risk_color}{header['risk']}{Style.RESET_ALL}")
        print(f"   ‚îî‚îÄ –û–ø–∏—Å–∞–Ω–∏–µ: {header['description']}")

        if header['present'] and header['value']:
            value_preview = header['value'][:80] + ('...' if len(header['value']) > 80 else '')
            print(f"   ‚îî‚îÄ –ó–Ω–∞—á–µ–Ω–∏–µ: {Fore.WHITE}{value_preview}{Style.RESET_ALL}")

            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            if header['warnings']:
                for warning in header['warnings']:
                    if 'üö®' in warning or '–ö–†–ò–¢–ò–ß–ï–°–ö–û' in warning:
                        print(f"      {Fore.RED}‚ö†Ô∏è  {warning}{Style.RESET_ALL}")
                    elif '‚ö†Ô∏è' in warning:
                        print(f"      {Fore.YELLOW}‚ö†Ô∏è  {warning}{Style.RESET_ALL}")
                    else:
                        print(f"      {Fore.WHITE}‚ÑπÔ∏è  {warning}{Style.RESET_ALL}")

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if header['recommendations']:
                for rec in header['recommendations']:
                    print(f"      {Fore.GREEN}‚úÖ {rec}{Style.RESET_ALL}")

    # –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    print(f"\n{Fore.CYAN}üö® –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:{Style.RESET_ALL}")
    print("-" * 70)

    if scan_results['issues']:
        critical_issues = [issue for issue in scan_results['issues'] if 'üö®' in issue or '–ö–†–ò–¢–ò–ß–ï–°–ö–û' in issue]
        warning_issues = [issue for issue in scan_results['issues'] if issue.startswith('‚ùå')]
        info_issues = [issue for issue in scan_results['issues'] if issue.startswith('‚ö†Ô∏è') or issue.startswith('‚ÑπÔ∏è')]

        if critical_issues:
            print(f"\n{Fore.RED}üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:{Style.RESET_ALL}")
            for i, issue in enumerate(critical_issues, 1):
                print(f"   {i}. {Fore.RED}{issue}{Style.RESET_ALL}")

        if warning_issues:
            print(f"\n{Fore.YELLOW}üü° –í–ê–ñ–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:{Style.RESET_ALL}")
            for i, issue in enumerate(warning_issues, 1):
                print(f"   {i}. {Fore.YELLOW}{issue}{Style.RESET_ALL}")

        if info_issues:
            print(f"\n{Fore.BLUE}üîµ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:{Style.RESET_ALL}")
            for i, issue in enumerate(info_issues, 1):
                print(f"   {i}. {Fore.BLUE}{issue}{Style.RESET_ALL}")
    else:
        print(f"\n{Fore.GREEN}üéâ –û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!{Style.RESET_ALL}")

    # –ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    print(f"\n{Fore.CYAN}üí° –ò–¢–û–ì–û–í–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:{Style.RESET_ALL}")
    if score >= 80:
        print(f"   {Fore.GREEN}‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!{Style.RESET_ALL}")
    elif score >= 60:
        print(f"   {Fore.YELLOW}‚ö†Ô∏è  –•–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –Ω–æ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.{Style.RESET_ALL}")
    else:
        print(f"   {Fore.RED}üö® –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!{Style.RESET_ALL}")


def generate_text_report(scan_results: Dict[str, Any]) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏.

    Args:
        scan_results (Dict): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
    """
    report_lines = [
        "=" * 70,
        "–û–¢–ß–ï–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò HTTP-–ó–ê–ì–û–õ–û–í–ö–û–í",
        "=" * 70,
        f"–¶–µ–ª—å: {scan_results['target']}",
        f"–§–∏–Ω–∞–ª—å–Ω—ã–π URL: {scan_results.get('final_url', scan_results['target'])}",
        f"–î–∞—Ç–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {scan_results['date']}",
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {scan_results['scan_duration']}—Å",
        f"HTTP —Å—Ç–∞—Ç—É—Å: {scan_results['http_status']}",
        f"–ë—ã–ª–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤: {'–î–∞' if scan_results.get('redirected', False) else '–ù–µ—Ç'}",
        "",
        f"–û–¶–ï–ù–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: {scan_results['security_score']}%",
        f"–ó–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {scan_results['present_headers']}/{scan_results['total_headers']}",
        f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {scan_results['critical_headers_present']}",
        "",
        "–ó–ê–ì–û–õ–û–í–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:",
        "-" * 50
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–µ
    for header in scan_results['headers']:
        status = "–ü–†–ò–°–£–¢–°–¢–í–£–ï–¢" if header['present'] else "–û–¢–°–£–¢–°–¢–í–£–ï–¢"
        symbol = "‚úÖ" if header['present'] else "‚ùå"

        report_lines.append(f"{symbol} {header['name']}: {status}")
        report_lines.append(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {header['description']}")
        report_lines.append(f"   –†–∏—Å–∫: {header['risk']}")
        report_lines.append(f"   –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: {'–î–∞' if header['critical'] else '–ù–µ—Ç'}")

        if header['present']:
            report_lines.append(f"   –ó–Ω–∞—á–µ–Ω–∏–µ: {header['value']}")

            if header['warnings']:
                report_lines.append("   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
                for warning in header['warnings']:
                    report_lines.append(f"     - {warning}")

            if header['recommendations']:
                report_lines.append("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                for rec in header['recommendations']:
                    report_lines.append(f"     - {rec}")
        else:
            report_lines.append("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫")

        report_lines.append("")

    # –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    report_lines.extend([
        "–í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:",
        "-" * 50
    ])

    if scan_results['issues']:
        for i, issue in enumerate(scan_results['issues'], 1):
            report_lines.append(f"{i}. {issue}")
    else:
        report_lines.append("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
    if scan_results.get('server_info'):
        server_info = scan_results['server_info']
        if any(server_info.values()):
            report_lines.extend([
                "",
                "–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ï–†–í–ï–†–ï:",
                "-" * 30
            ])
            for key, value in server_info.items():
                if value:
                    report_lines.append(f"{key}: {value}")

    report_lines.extend([
        "",
        "=" * 70,
        f"–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
        "–ö–æ–Ω–µ—Ü –æ—Ç—á–µ—Ç–∞"
    ])

    return "\n".join(report_lines)


def save_report_to_file(scan_results: Dict[str, Any],
                        filename: str = "security_report.txt") -> bool:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª.

    Args:
        scan_results (Dict): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        filename (str): –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        report_text = generate_text_report(scan_results)

        with open(filename, 'w', encoding='utf-8') as file:
            file.write(report_text)

        print(f"{Fore.GREEN}‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}{Style.RESET_ALL}")
        return True

    except Exception as e:
        print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}{Style.RESET_ALL}")
        return False


def print_security_score(score: int) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç —Ü–≤–µ—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.

    Args:
        score (int): –û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ç 0 –¥–æ 100
    """
    print(Fore.CYAN + "\nüìä –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò" + Style.RESET_ALL)

    if score >= 80:
        color = Fore.GREEN
        level = "–û–¢–õ–ò–ß–ù–û"
        emoji = "üéâ"
    elif score >= 60:
        color = Fore.YELLOW
        level = "–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"
        emoji = "‚ö†Ô∏è"
    else:
        color = Fore.RED
        level = "–ù–ò–ó–ö–ò–ô –£–†–û–í–ï–ù–¨"
        emoji = "üö®"

    print(f"{color}{emoji} –û—Ü–µ–Ω–∫–∞: {score}% - {level}{Style.RESET_ALL}")


def generate_short_summary(scan_results: Dict[str, Any]) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.

    Args:
        scan_results (Dict): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

    Returns:
        str: –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞
    """
    score = scan_results['security_score']

    if score >= 80:
        status = "üü¢ –ë–ï–ó–û–ü–ê–°–ù–û"
    elif score >= 60:
        status = "üü° –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø"
    else:
        status = "üî¥ –û–ü–ê–°–ù–û"

    critical_issues = sum(1 for issue in scan_results['issues']
                          if 'üö®' in issue or '–ö–†–ò–¢–ò–ß–ï–°–ö–û' in issue)

    return (f"{status} | –û—Ü–µ–Ω–∫–∞: {score}% | "
            f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {scan_results['present_headers']}/{scan_results['total_headers']} | "
            f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {critical_issues}")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    sample_results = {
        'target': 'https://example.com',
        'date': '2024-01-15 14:30:00',
        'security_score': 75,
        'scan_duration': 2.5,
        'http_status': 200,
        'final_url': 'https://example.com',
        'redirected': False,
        'present_headers': 8,
        'total_headers': 11,
        'critical_headers_present': 3,
        'headers': [
            {
                'name': 'Content-Security-Policy',
                'present': True,
                'value': "default-src 'self'",
                'risk': '–ù–∏–∑–∫–∏–π',
                'description': '–ó–∞—â–∏—Ç–∞ –æ—Ç XSS –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∫–æ–¥–∞',
                'critical': True,
                'warnings': [],
                'recommendations': ['‚úÖ CSP –Ω–∞—Å—Ç—Ä–æ–µ–Ω']
            },
            {
                'name': 'Strict-Transport-Security',
                'present': False,
                'value': None,
                'risk': '–í—ã—Å–æ–∫–∏–π',
                'description': '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTTPS',
                'critical': True,
                'warnings': [],
                'recommendations': []
            }
        ],
        'issues': [
            "‚ùå HSTS –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –≤–æ–∑–º–æ–∂–Ω—ã downgrade –∞—Ç–∞–∫–∏ –Ω–∞ HTTPS",
            "‚ö†Ô∏è CORS –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤ (Access-Control-Allow-Origin: *)"
        ],
        'server_info': {
            'server': 'nginx/1.18.0',
            'x_powered_by': None,
            'content_type': 'text/html'
        },
        'error': None
    }

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
    print_report(sample_results)
    print("\n" + "=" * 60)
    print("–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞:", generate_short_summary(sample_results))