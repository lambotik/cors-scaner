from colorama import Fore, Style
from typing import Dict, List, Optional, Any


def print_report(headers: Dict[str, Optional[str]], issues: List[str]) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
    """
    print(Fore.CYAN + "\nüîê –ó–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:" + Style.RESET_ALL)

    for header_name, header_value in headers.items():
        status = header_value if header_value else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

        # –¶–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        if header_name.startswith("Access-Control-"):
            if header_value == "*" and header_name == "Access-Control-Allow-Origin":
                print(f"{Fore.RED}{header_name}: {status}{Style.RESET_ALL}")
            else:
                print(f"{Fore.BLUE}{header_name}: {status}{Style.RESET_ALL}")
        elif header_value:
            print(f"{Fore.GREEN}{header_name}: {status}{Style.RESET_ALL}")
        else:
            print(f"{Fore.RED}{header_name}: {status}{Style.RESET_ALL}")

    print(Fore.YELLOW + "\n‚ö†Ô∏è –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:" + Style.RESET_ALL)

    for issue in issues:
        if issue.startswith("üö®"):
            print(f"{Fore.RED}{issue}{Style.RESET_ALL}")
        elif issue.startswith("‚ùå"):
            print(f"{Fore.RED}{issue}{Style.RESET_ALL}")
        elif issue.startswith("‚ö†Ô∏è"):
            print(f"{Fore.YELLOW}{issue}{Style.RESET_ALL}")
        elif issue.startswith("‚úÖ"):
            print(f"{Fore.GREEN}{issue}{Style.RESET_ALL}")
        else:
            print(issue)


def generate_text_report(headers: List[Dict[str, Any]], issues: List[str],
                         target: str, security_score: int) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º—É –≤—ã–≤–æ–¥—É).
    –ü–æ–ª–µ–∑–µ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –≤ —Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ email
    –∏–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.
    Args:
        headers (List[Dict[str, Any]]): –°–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–∫–∞–Ω–µ—Ä–∞
            –ö–∞–∂–¥—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–º–µ–µ—Ç –ø–æ–ª—è: 'name', 'present', 'value', 'risk'
        issues (List[str]): –°–ø–∏—Å–æ–∫ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        target (str): –¶–µ–ª–µ–≤–æ–π URL –∫–æ—Ç–æ—Ä—ã–π —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–ª—Å—è
        security_score (int): –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
    Example:
        >>> report_text = generate_text_report(headers, issues, "https://example.com", 75)
        >>> print(report_text)
    """
    report_lines = [
        "=" * 60,
        "–û–¢–ß–ï–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ó–ê–ì–û–õ–û–í–ö–û–í",
        "=" * 60,
        f"–¶–µ–ª—å: {target}",
        f"–û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {security_score}%",
        f"–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M')}",
        "",
        "–ó–ê–ì–û–õ–û–í–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:",
        "-" * 40
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–µ
    for header in headers:
        status = "‚úÖ –ü–†–ò–°–£–¢–°–¢–í–£–ï–¢" if header['present'] else "‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢"
        value = header['value'] or "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        report_lines.append(f"{header['name']}: {status}")
        if header['present']:
            report_lines.append(f"  –ó–Ω–∞—á–µ–Ω–∏–µ: {value}")
        report_lines.append(f"  –†–∏—Å–∫: {header['risk']}")
        report_lines.append("")

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    report_lines.extend([
        "–í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:",
        "-" * 40
    ])

    if issues:
        for i, issue in enumerate(issues, 1):
            report_lines.append(f"{i}. {issue}")
    else:
        report_lines.append("‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")

    report_lines.extend([
        "",
        "=" * 60,
        "–ö–æ–Ω–µ—Ü –æ—Ç—á–µ—Ç–∞"
    ])

    return "\n".join(report_lines)


def save_report_to_file(headers: List[Dict[str, Any]], issues: List[str],
                        target: str, security_score: int,
                        filename: str = "security_report.txt") -> bool:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª.
    Args:
        headers (List[Dict[str, Any]]): –°–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        issues (List[str]): –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
        target (str): –¶–µ–ª–µ–≤–æ–π URL
        security_score (int): –û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        filename (str): –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "security_report.txt")
    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    Example:
    """
    try:
        report_text = generate_text_report(headers, issues, target, security_score)

        with open(filename, 'w', encoding='utf-8') as file:
            file.write(report_text)

        print(f"{Fore.GREEN}‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}{Style.RESET_ALL}")
        return True

    except Exception as e:
        print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}{Style.RESET_ALL}")
        return False


def print_security_score(score: int) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç —Ü–≤–µ—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.
    Args:
        score (int): –û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ç 0 –¥–æ 100
    Returns:
        None
    """
    print(Fore.CYAN + "\nüìä –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò" + Style.RESET_ALL)
    if score >= 80:
        color = Fore.GREEN
        level = "–û–¢–õ–ò–ß–ù–û"
    elif score >= 60:
        color = Fore.YELLOW
        level = "–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"
    else:
        color = Fore.RED
        level = "–ù–ò–ó–ö–ò–ô –£–†–û–í–ï–ù–¨"

    print(f"{color}–û—Ü–µ–Ω–∫–∞: {score}% - {level}{Style.RESET_ALL}")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    sample_headers = {
        "Content-Security-Policy": "default-src 'self'",
        "Strict-Transport-Security": "max-age=31536000",
        "X-Frame-Options": None,
        "X-Content-Type-Options": "nosniff"
    }
    sample_issues = [
        "‚ùå X-Frame-Options –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî Clickjacking",
        "‚ö†Ô∏è Content-Security-Policy —Å–æ–¥–µ—Ä–∂–∏—Ç 'unsafe-inline' - —Å–Ω–∏–∂–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
        "‚úÖ Strict-Transport-Security –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    ]
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
    print_report(sample_headers, sample_issues)
    print_security_score(75)
    # –ü—Ä–∏–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
    headers_list = [
        {"name": "CSP", "present": True, "value": "default-src 'self'", "risk": "XSS"},
        {"name": "HSTS", "present": False, "value": None, "risk": "SSL stripping"}
    ]
    save_report_to_file(headers_list, sample_issues, "https://example.com", 75)
