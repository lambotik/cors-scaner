import os
from flask import Flask, request, render_template, jsonify, send_from_directory
from flask_cors import CORS
from scanner import scan_headers

app = Flask(__name__, static_folder='static', template_folder='templates')
# –í–∫–ª—é—á–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤, —á—Ç–æ–±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
CORS(app)


def format_results_for_template(results):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
    """
    # –û—á–∏—â–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    cleaned_problems = []
    for problem in results.get('issues', []):
        cleaned = problem.replace("X-", "").replace("A.", "").strip()
        cleaned = ' '.join(cleaned.split())
        cleaned_problems.append(cleaned)

    cleaned_recommendations = []
    for rec in results.get('recommendations', []):
        cleaned_rec = rec.strip()
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        if cleaned_rec not in cleaned_recommendations:
            cleaned_recommendations.append(cleaned_rec)

    # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    formatted = {
        'security_score': results.get('security_score', 0),
        'total_headers': results.get('total_headers', 0),
        'target_url': results.get('target', ''),
        'final_url': results.get('final_url', results.get('target', '')),
        'configured_headers': results.get('present_headers', 0),
        'problems_count': len(cleaned_problems),
        'scan_duration': f"{results.get('scan_duration', 0):.2f}s",
        'risk_level': results.get('risk_level', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'),
        'server_info': results.get('server_info', '–ù–µ —É–∫–∞–∑–∞–Ω'),
        'redirects': results.get('redirects', False),
        'http_status': results.get('http_status', 0),
        'problems': cleaned_problems,
        'recommendations': cleaned_recommendations,  # –¢–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        'cors_analysis': results.get('cors_analysis', {}),
        'scan_details': results.get('scan_details', {}),
        'final_recommendation': generate_final_recommendation(results)
    }

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
    headers_data = {
        'cors': [],
        'security': [],
        'privacy': [],
        'other': []
    }

    cors_headers = ['Access-Control-Allow-Origin', 'Access-Control-Allow-Methods',
                    'Access-Control-Allow-Headers', 'Access-Control-Allow-Credentials']

    security_headers = ['Content-Security-Policy', 'Strict-Transport-Security',
                        'X-Frame-Options', 'X-Content-Type-Options', 'X-XSS-Protection']

    privacy_headers = ['Referrer-Policy', 'Permissions-Policy']

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    for header_info in results.get('headers', []):
        header_name = header_info.get('name', '')
        status = 'present' if header_info.get('present', False) else 'missing'

        header_data = {
            'name': header_name,
            'status': status,
            'risk_level': header_info.get('risk_level', 'low').lower(),
            'risk_text': header_info.get('risk_level', '–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫'),
            'description': header_info.get('description', ''),
            'risk_description': header_info.get('risk_description', ''),
            'value': header_info.get('value', ''),
            'quality_score': header_info.get('quality_score', 0),
            'critical': header_info.get('critical', False),
            'notes': []
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ (–±–µ–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π)
        for note in header_info.get('notes', []):
            header_data['notes'].append(
                {'type': 'success' if '–ø—Ä–∞–≤–∏–ª—å–Ω–æ' in note or '–æ—Ç–ª–∏—á–Ω–æ' in note else 'warning', 'text': note})

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if header_name in cors_headers:
            headers_data['cors'].append(header_data)
        elif header_name in security_headers:
            headers_data['security'].append(header_data)
        elif header_name in privacy_headers:
            headers_data['privacy'].append(header_data)
        else:
            headers_data['other'].append(header_data)

    formatted['headers'] = headers_data
    return formatted


def generate_final_recommendation(results):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    score = results.get('security_score', 0)
    risk_level = results.get('risk_level', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')

    if score >= 90:
        return {
            'title': '‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å!',
            'description': '–í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.',
            'level': 'success'
        }
    elif score >= 70:
        return {
            'title': 'üü° –•–æ—Ä–æ—à–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
            'description': '–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ª—É—á—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.',
            'level': 'warning'
        }
    elif score >= 50:
        return {
            'title': 'üü† –¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π',
            'description': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–∞–∂–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.',
            'level': 'warning'
        }
    elif score >= 30:
        return {
            'title': 'üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫',
            'description': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ CSP, HSTS –∏ X-Frame-Options.',
            'level': 'danger'
        }
    else:
        return {
            'title': 'üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫!',
            'description': '–°–∞–π—Ç –∫—Ä–∞–π–Ω–µ —É—è–∑–≤–∏–º. –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.',
            'level': 'critical'
        }


# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è favicon
@app.route('/favicon.ico')
def favicon():
    return send_from_directory(os.path.join(app.root_path, 'static'),
                               'favicon.ico', mimetype='image/x-icon')


@app.route("/", methods=["GET", "POST"])
def index():
    """
    –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    try:
        if request.method == "POST":
            url = request.form.get("url")
            if not url:
                return render_template("index.html", error="–û—à–∏–±–∫–∞: URL –Ω–µ —É–∫–∞–∑–∞–Ω")
            print(f"üîç –°–∫–∞–Ω–∏—Ä—É–µ–º URL: {url}")
            results = scan_headers(url)
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã, –æ—Ü–µ–Ω–∫–∞: {results.get('security_score', 0)}%")

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            formatted_results = format_results_for_template(results)

            # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            return render_template("report.html", **formatted_results)
        return render_template("index.html")
    except Exception as e:
        return render_template("index.html", error=f"–û—à–∏–±–∫–∞: {str(e)}")


@app.route("/api/scan", methods=["POST"])
def api_scan():
    """
    REST API endpoint –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.
    """
    data = request.get_json()

    if not data:
        return jsonify({"error": "JSON –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã"}), 400

    url = data.get('url')

    if not url:
        return jsonify({"error": "URL –Ω–µ —É–∫–∞–∑–∞–Ω"}), 400

    try:
        results = scan_headers(url)
        return jsonify(results)
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/test-scan")
def test_scan():
    """
    –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∫–∞–Ω–µ—Ä–∞.
    """
    try:
        results = scan_headers("https://google.com")
        return jsonify(results)
    except Exception as e:
        return jsonify({"error": str(e)}), 500


# –£–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö –∏–∑ —à–∞–±–ª–æ–Ω–∞ report.html
@app.route("/report-template-fix")
def report_template_fix():
    """
    –í—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —à–∞–±–ª–æ–Ω–∞ –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤
    """
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    test_results = {
        'target': 'https://example.com',
        'date': '2024-01-15 14:30:00',
        'security_score': 75,
        'scan_duration': 2.5,
        'http_status': 200,
        'present_headers': 8,
        'total_headers': 11,
        'headers': [
            {
                'name': 'Content-Security-Policy',
                'present': True,
                'value': "default-src 'self'",
                'risk': '–ù–∏–∑–∫–∏–π',
                'critical': True
            },
            {
                'name': 'Strict-Transport-Security',
                'present': False,
                'value': None,
                'risk': '–í—ã—Å–æ–∫–∏–π',
                'critical': True
            }
        ],
        'issues': [
            "‚ùå HSTS –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –≤–æ–∑–º–æ–∂–Ω—ã downgrade –∞—Ç–∞–∫–∏ –Ω–∞ HTTPS",
            "‚ö†Ô∏è CORS –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤ (Access-Control-Allow-Origin: *)"
        ]
    }

    formatted_results = format_results_for_template(test_results)
    return render_template("report.html", **formatted_results)


if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É templates –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists('templates'):
        os.makedirs('templates')

    port = int(os.environ.get("PORT", 5000))
    print(f"üöÄ –ó–∞–ø—É—Å–∫ CORS Scanner –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    print("üìä –õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
    app.run(host="0.0.0.0", port=port, debug=True)
