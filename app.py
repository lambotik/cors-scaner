import os
from flask import Flask, request, render_template, jsonify, send_from_directory
from flask_cors import CORS
from scanner import scan_headers

app = Flask(__name__, static_folder='static', template_folder='templates')
# –í–∫–ª—é—á–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤, —á—Ç–æ–±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
CORS(app)


# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è favicon
@app.route('/favicon.ico')
def favicon():
    return send_from_directory(os.path.join(app.root_path, 'static'),
                               'favicon.ico', mimetype='image/x-icon')


@app.route("/", methods=["GET", "POST"])
def index():
    """
    –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    try:
        if request.method == "POST":
            url = request.form.get("url")
            if not url:
                return render_template("index.html", error="–û—à–∏–±–∫–∞: URL –Ω–µ —É–∫–∞–∑–∞–Ω")
            print(f"üîç –°–∫–∞–Ω–∏—Ä—É–µ–º URL: {url}")
            results = scan_headers(url)
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã, –æ—Ü–µ–Ω–∫–∞: {results.get('security_score', 0)}%")

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            formatted_results = format_results_for_template(results)

            # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            return render_template("report.html", **formatted_results)
        return render_template("index.html")
    except Exception as e:
        return render_template("index.html", error=f"–û—à–∏–±–∫–∞: {str(e)}")


def format_results_for_template(results):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
    """
    # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    formatted = {
        'security_score': results.get('security_score', 0),
        'total_headers': results.get('total_headers', 0),
        'target_url': results.get('target', ''),
        'final_url': results.get('final_url', results.get('target', '')),
        'configured_headers': results.get('present_headers', 0),
        'problems_count': len(results.get('issues', [])),
        'scan_duration': f"{results.get('scan_duration', 0):.2f}s",
        'problems': results.get('issues', []),
        'final_recommendation': {
            'title': 'üö® –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!' if results.get('security_score',
                                                                                      0) < 70 else '‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞ —Ö–æ—Ä–æ—à–µ–º —É—Ä–æ–≤–Ω–µ',
            'description': '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.'
        }
    }

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
    headers_data = {
        'cors': [],
        'security': [],
        'privacy': [],
        'other': []
    }

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫–∞–∂–¥—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    cors_headers = ['Access-Control-Allow-Origin', 'Access-Control-Allow-Methods',
                    'Access-Control-Allow-Headers', 'Access-Control-Allow-Credentials']

    security_headers = ['Content-Security-Policy', 'Strict-Transport-Security',
                        'X-Frame-Options', 'X-Content-Type-Options', 'X-XSS-Protection']

    privacy_headers = ['Referrer-Policy', 'Permissions-Policy']

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    for header_info in results.get('headers', []):
        header_name = header_info.get('name', '')
        is_present = header_info.get('present', False)
        header_value = header_info.get('value', '')

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Ä–∏—Å–∫
        status = 'present' if is_present else 'missing'
        risk_level = 'low'
        risk_text = '–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫'

        if header_info.get('critical', False):
            risk_level = 'medium' if is_present else 'high'
            risk_text = '–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫' if is_present else '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫'

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        descriptions = {
            'Content-Security-Policy': '–ó–∞—â–∏—Ç–∞ –æ—Ç XSS –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∫–æ–¥–∞',
            'Strict-Transport-Security': '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTTPS',
            'X-Frame-Options': '–ó–∞—â–∏—Ç–∞ –æ—Ç clickjacking',
            'X-Content-Type-Options': '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ MIME-sniffing',
            'X-XSS-Protection': '–ó–∞—â–∏—Ç–∞ –æ—Ç XSS (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è)',
            'Referrer-Policy': '–ö–æ–Ω—Ç—Ä–æ–ª—å —É—Ç–µ—á–∫–∏ referrer –¥–∞–Ω–Ω—ã—Ö',
            'Permissions-Policy': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∫ API –±—Ä–∞—É–∑–µ—Ä–∞',
            'Access-Control-Allow-Origin': 'CORS –ø–æ–ª–∏—Ç–∏–∫–∞ - —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã',
            'Access-Control-Allow-Methods': 'CORS —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã',
            'Access-Control-Allow-Headers': 'CORS —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏',
            'Access-Control-Allow-Credentials': 'CORS –ø–µ—Ä–µ–¥–∞—á–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'
        }

        description = descriptions.get(header_name, 'Security header')

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–º–µ—Ç–∫–∏
        notes = []
        if is_present:
            notes.append({'type': 'success', 'text': '‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'})
            if header_value and '*' in header_value and 'Access-Control-Allow-Origin' in header_name:
                notes.append({'type': 'warning', 'text': '‚ö†Ô∏è CORS –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤'})
        else:
            if header_info.get('critical', False):
                notes.append({'type': 'warning', 'text': '‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'})
            notes.append({'type': 'info', 'text': 'üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫'})

        header_data = {
            'name': header_name,
            'status': status,
            'risk_level': risk_level,
            'risk_text': risk_text,
            'description': description,
            'value': header_value,
            'notes': notes
        }

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if header_name in cors_headers:
            headers_data['cors'].append(header_data)
        elif header_name in security_headers:
            headers_data['security'].append(header_data)
        elif header_name in privacy_headers:
            headers_data['privacy'].append(header_data)
        else:
            headers_data['other'].append(header_data)

    formatted['headers'] = headers_data
    return formatted


@app.route("/api/scan", methods=["POST"])
def api_scan():
    """
    REST API endpoint –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.
    """
    data = request.get_json()

    if not data:
        return jsonify({"error": "JSON –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã"}), 400

    url = data.get('url')

    if not url:
        return jsonify({"error": "URL –Ω–µ —É–∫–∞–∑–∞–Ω"}), 400

    try:
        results = scan_headers(url)
        return jsonify(results)
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/test-scan")
def test_scan():
    """
    –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∫–∞–Ω–µ—Ä–∞.
    """
    try:
        results = scan_headers("https://google.com")
        return jsonify(results)
    except Exception as e:
        return jsonify({"error": str(e)}), 500


# –£–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö –∏–∑ —à–∞–±–ª–æ–Ω–∞ report.html
@app.route("/report-template-fix")
def report_template_fix():
    """
    –í—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —à–∞–±–ª–æ–Ω–∞ –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤
    """
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    test_results = {
        'target': 'https://example.com',
        'date': '2024-01-15 14:30:00',
        'security_score': 75,
        'scan_duration': 2.5,
        'http_status': 200,
        'present_headers': 8,
        'total_headers': 11,
        'headers': [
            {
                'name': 'Content-Security-Policy',
                'present': True,
                'value': "default-src 'self'",
                'risk': '–ù–∏–∑–∫–∏–π',
                'critical': True
            },
            {
                'name': 'Strict-Transport-Security',
                'present': False,
                'value': None,
                'risk': '–í—ã—Å–æ–∫–∏–π',
                'critical': True
            }
        ],
        'issues': [
            "‚ùå HSTS –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –≤–æ–∑–º–æ–∂–Ω—ã downgrade –∞—Ç–∞–∫–∏ –Ω–∞ HTTPS",
            "‚ö†Ô∏è CORS –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤ (Access-Control-Allow-Origin: *)"
        ]
    }

    formatted_results = format_results_for_template(test_results)
    return render_template("report.html", **formatted_results)


if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É templates –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists('templates'):
        os.makedirs('templates')

    port = int(os.environ.get("PORT", 5000))
    print(f"üöÄ –ó–∞–ø—É—Å–∫ CORS Scanner –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    print("üìä –õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
    app.run(host="0.0.0.0", port=port, debug=True)