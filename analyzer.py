from typing import Dict, List, Optional, Any
from ethic import ethical_explain


def analyze(headers: Dict[str, Optional[str]]) -> List[str]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –≤—ã—è–≤–ª—è–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏.

    Args:
        headers (Dict[str, Optional[str]]): –°–ª–æ–≤–∞—Ä—å HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤

    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å –∏–∫–æ–Ω–∫–∞–º–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
    """
    issues: List[str] = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Content-Security-Policy
    csp_value = headers.get("Content-Security-Policy")
    if not csp_value:
        issues.append("‚ùå CSP –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî —Å–∞–π—Ç —É—è–∑–≤–∏–º –∫ XSS.")
    else:
        csp_issues = _analyze_csp(csp_value)
        issues.extend(csp_issues)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS –ø–æ–ª–∏—Ç–∏–∫–∏
    cors_value = headers.get("Access-Control-Allow-Origin")
    if cors_value == "*":
        issues.append("üö® CORS –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤ ‚Äî –≤–æ–∑–º–æ–∂–Ω–∞ —É—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö!")
    elif not cors_value:
        issues.append("‚ÑπÔ∏è CORS –ø–æ–ª–∏—Ç–∏–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS credentials
    cors_creds = headers.get("Access-Control-Allow-Credentials")
    if cors_creds and cors_creds.lower() == "true" and cors_value == "*":
        issues.append("üö® –û–ø–∞—Å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ: CORS credentials=true —Å –æ—Ç–∫—Ä—ã—Ç—ã–º origin=*!")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ HSTS
    hsts_value = headers.get("Strict-Transport-Security")
    if not hsts_value:
        issues.append("‚ùå –ù–µ—Ç HSTS ‚Äî –≤–æ–∑–º–æ–∂–Ω—ã –∞—Ç–∞–∫–∏ —á–µ—Ä–µ–∑ downgrade.")
    else:
        hsts_issues = _analyze_hsts(hsts_value)
        issues.extend(hsts_issues)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç clickjacking
    xfo_value = headers.get("X-Frame-Options")
    if not xfo_value:
        issues.append("‚ùå X-Frame-Options –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî —Ä–∏—Å–∫ clickjacking –∞—Ç–∞–∫.")
    else:
        xfo_issues = _analyze_x_frame_options(xfo_value)
        issues.extend(xfo_issues)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    if not headers.get("Access-Control-Allow-Methods"):
        issues.append("‚ö†Ô∏è Access-Control-Allow-Methods –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    if not headers.get("Access-Control-Allow-Headers"):
        issues.append("‚ö†Ô∏è Access-Control-Allow-Headers –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    return issues


def _analyze_cors_policy(headers: Dict[str, Optional[str]]) -> List[str]:
    """–ê–Ω–∞–ª–∏–∑ CORS –ø–æ–ª–∏—Ç–∏–∫–∏"""
    issues = []
    origin = headers.get("Access-Control-Allow-Origin")
    credentials = headers.get("Access-Control-Allow-Credentials")

    if origin == "*":
        issues.append("üö® CORS: –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤")
        if credentials and credentials.lower() == "true":
            issues.append("üö® CORS: credentials=true –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å origin=*")

    return issues