from typing import Dict, List, Optional, Any
from ethic import ethical_explain


def analyze(headers: Dict[str, Optional[str]]) -> List[str]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –≤—ã—è–≤–ª—è–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö security-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç 
    –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ–ø–∞—Å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    Args:
        headers (Dict[str, Optional[str]]): –°–ª–æ–≤–∞—Ä—å HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, 
            –≥–¥–µ –∫–ª—é—á - –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞, –∑–Ω–∞—á–µ–Ω–∏–µ - –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–ª–∏ None
    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å –∏–∫–æ–Ω–∫–∞–º–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
    Example:
        ['‚ö†Ô∏è CORS –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö ‚Äî –≤–æ–∑–º–æ–∂–Ω–∞ —É—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö.']
    """
    issues: List[str] = []
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Content-Security-Policy
    csp_value = headers.get("Content-Security-Policy")
    if not csp_value:
        issues.append("‚ùå CSP –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî —Å–∞–π—Ç —É—è–∑–≤–∏–º –∫ XSS.")
    else:
        # –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ CSP –ø–æ–ª–∏—Ç–∏–∫–∏
        csp_issues = _analyze_csp(csp_value)
        issues.extend(csp_issues)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS –ø–æ–ª–∏—Ç–∏–∫–∏
    cors_value = headers.get("Access-Control-Allow-Origin")
    if cors_value == "*":
        issues.append("‚ö†Ô∏è CORS –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö ‚Äî –≤–æ–∑–º–æ–∂–Ω–∞ —É—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö.")
    elif not cors_value:
        issues.append("‚ÑπÔ∏è CORS –ø–æ–ª–∏—Ç–∏–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ ‚Äî –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏.")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ HSTS
    hsts_value = headers.get("Strict-Transport-Security")
    if not hsts_value:
        issues.append("‚ùå –ù–µ—Ç HSTS ‚Äî –≤–æ–∑–º–æ–∂–Ω—ã –∞—Ç–∞–∫–∏ —á–µ—Ä–µ–∑ downgrade.")
    else:
        hsts_issues = _analyze_hsts(hsts_value)
        issues.extend(hsts_issues)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç clickjacking
    xfo_value = headers.get("X-Frame-Options")
    if not xfo_value:
        issues.append("‚ùå X-Frame-Options –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî —Ä–∏—Å–∫ clickjacking –∞—Ç–∞–∫.")
    else:
        xfo_issues = _analyze_x_frame_options(xfo_value)
        issues.extend(xfo_issues)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ MIME-sniffing –∑–∞—â–∏—Ç—ã
    xcto_value = headers.get("X-Content-Type-Options")
    if not xcto_value:
        issues.append("‚ùå X-Content-Type-Options –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî —Ä–∏—Å–∫ MIME-sniffing –∞—Ç–∞–∫.")
    elif xcto_value.lower() != "nosniff":
        issues.append(f"‚ö†Ô∏è X-Content-Type-Options –∏–º–µ–µ—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {xcto_value}")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    referrer_value = headers.get("Referrer-Policy")
    if not referrer_value:
        issues.append("‚ùå Referrer-Policy –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –≤–æ–∑–º–æ–∂–Ω–∞ —É—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–µ—Ä–∞.")
    else:
        referrer_issues = _analyze_referrer_policy(referrer_value)
        issues.extend(referrer_issues)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    permissions_value = headers.get("Permissions-Policy")
    if not permissions_value:
        issues.append("‚ö†Ô∏è Permissions-Policy –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ API —É—Å—Ç—Ä–æ–π—Å—Ç–≤.")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç XSS (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è, –Ω–æ –≤—Å–µ –µ—â–µ –ø–æ–ª–µ–∑–Ω–∞—è)
    xss_value = headers.get("X-XSS-Protection")
    if not xss_value:
        issues.append("‚ÑπÔ∏è X-XSS-Protection –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã –∏–º–µ—é—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∑–∞—â–∏—Ç—É.")
    elif xss_value == "0":
        issues.append("‚ö†Ô∏è X-XSS-Protection –æ—Ç–∫–ª—é—á–µ–Ω ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è '1; mode=block'")
    return issues


def _analyze_csp(csp_value: str) -> List[str]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª–∏—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (CSP) –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–ø–∞—Å–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–∏–≤.
    Args:
        csp_value (str): –ó–Ω–∞—á–µ–Ω–∏–µ Content-Security-Policy –∑–∞–≥–æ–ª–æ–≤–∫–∞
    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å CSP
    """
    issues = []
    csp_lower = csp_value.lower()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∞—Å–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–∏–≤
    if "'unsafe-inline'" in csp_lower:
        issues.append("‚ö†Ô∏è CSP —Å–æ–¥–µ—Ä–∂–∏—Ç 'unsafe-inline' ‚Äî —Å–Ω–∏–∂–∞–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç XSS.")
    if "'unsafe-eval'" in csp_lower:
        issues.append("‚ö†Ô∏è CSP —Å–æ–¥–µ—Ä–∂–∏—Ç 'unsafe-eval' ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ eval().")
    if "default-src *" in csp_lower or "default-src 'none'" not in csp_lower:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ default-src (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
        if "default-src" not in csp_lower:
            issues.append("‚ÑπÔ∏è CSP –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç default-src –¥–∏—Ä–µ–∫—Ç–∏–≤—É ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —è–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ.")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–∏—à–∫–æ–º —Ä–∞–∑—Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–∏—Ç–∏–∫
    if "script-src *" in csp_lower:
        issues.append("üö® CSP: script-src * ‚Äî –∫—Ä–∞–π–Ω–µ –æ–ø–∞—Å–Ω–æ, —Ä–∞–∑—Ä–µ—à–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç—ã —Å –ª—é–±—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤!")
    if "style-src *" in csp_lower:
        issues.append("üö® CSP: style-src * ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ—Ç —Å—Ç–∏–ª–∏ —Å –ª—é–±—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤!")
    return issues


def _analyze_hsts(hsts_value: str) -> List[str]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Strict-Transport-Security.
    Args:
        hsts_value (str): –ó–Ω–∞—á–µ–Ω–∏–µ HSTS –∑–∞–≥–æ–ª–æ–≤–∫–∞
    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å HSTS
    """
    issues = []
    hsts_lower = hsts_value.lower()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ HSTS
    if "max-age=0" in hsts_lower:
        issues.append("üö® HSTS –æ—Ç–∫–ª—é—á–µ–Ω (max-age=0) ‚Äî HTTPS downgrade –∞—Ç–∞–∫–∏ –≤–æ–∑–º–æ–∂–Ω—ã!")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–≥–æ max-age
    if "max-age=" in hsts_lower:
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ max-age
            max_age_str = hsts_value.split("max-age=")[1].split(";")[0].strip()
            max_age = int(max_age_str)

            if max_age < 31536000:  # 1 –≥–æ–¥ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                issues.append(f"‚ö†Ô∏è HSTS max-age={max_age} ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 31536000 (1 –≥–æ–¥)")
        except (ValueError, IndexError):
            issues.append("‚ö†Ô∏è HSTS –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π max-age –ø–∞—Ä–∞–º–µ—Ç—Ä")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è includeSubDomains
    if "includesubdomains" not in hsts_lower:
        issues.append("‚ÑπÔ∏è HSTS –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç includeSubDomains ‚Äî –ø–æ–¥–¥–æ–º–µ–Ω—ã –Ω–µ –∑–∞—â–∏—â–µ–Ω—ã")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ preload –¥–∏—Ä–µ–∫—Ç–∏–≤—ã
    if "preload" not in hsts_lower:
        issues.append("‚ÑπÔ∏è HSTS –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç preload ‚Äî –Ω–µ –∑–∞—â–∏—â–µ–Ω –æ—Ç –ø–µ—Ä–≤–æ–π –∞—Ç–∞–∫–∏")
    return issues


def _analyze_x_frame_options(xfo_value: str) -> List[str]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ X-Frame-Options.
    Args:
        xfo_value (str): –ó–Ω–∞—á–µ–Ω–∏–µ X-Frame-Options –∑–∞–≥–æ–ª–æ–≤–∫–∞
    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å X-Frame-Options
    """
    issues = []
    xfo_upper = xfo_value.upper()
    valid_values = ["DENY", "SAMEORIGIN"]
    if xfo_upper not in valid_values:
        issues.append(f"‚ö†Ô∏è X-Frame-Options –∏–º–µ–µ—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {xfo_value}")
    if xfo_upper == "SAMEORIGIN":
        issues.append("‚ÑπÔ∏è X-Frame-Options: SAMEORIGIN ‚Äî —Ñ—Ä–µ–π–º—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Å —Ç–æ–≥–æ –∂–µ origin")
    return issues


def _analyze_referrer_policy(referrer_value: str) -> List[str]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª–∏—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö.
    Args:
        referrer_value (str): –ó–Ω–∞—á–µ–Ω–∏–µ Referrer-Policy –∑–∞–≥–æ–ª–æ–≤–∫–∞
    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å Referrer-Policy
    """
    issues = []
    referrer_lower = referrer_value.lower()

    # –°–ø–∏—Å–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–æ–ª–∏—Ç–∏–∫ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    safe_policies = [
        "no-referrer",
        "no-referrer-when-downgrade",
        "same-origin",
        "origin",
        "strict-origin",
        "origin-when-cross-origin",
        "strict-origin-when-cross-origin",
        "unsafe-url"
    ]

    if referrer_lower not in [p.lower() for p in safe_policies]:
        issues.append(f"‚ö†Ô∏è Referrer-Policy –∏–º–µ–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {referrer_value}")
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –º–µ–Ω–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–æ–ª–∏—Ç–∏–∫
    if referrer_lower == "unsafe-url":
        issues.append("‚ö†Ô∏è Referrer-Policy: unsafe-url ‚Äî –ø–µ—Ä–µ–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π URL –≤ —Ä–µ—Ñ–µ—Ä–µ—Ä–µ")
    if referrer_lower == "no-referrer-when-downgrade":
        issues.append("‚ÑπÔ∏è Referrer-Policy: no-referrer-when-downgrade ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–æ–≤")
    return issues


def analyze_with_ethical_context(headers: Dict[str, Optional[str]]) -> Dict[str, Any]:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å —ç—Ç–∏—á–µ—Å–∫–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º.
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å —ç—Ç–∏—á–µ—Å–∫–∏–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
    Args:
        headers (Dict[str, Optional[str]]): –°–ª–æ–≤–∞—Ä—å HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    Returns:
        Dict[str, Any]: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å —ç—Ç–∏—á–µ—Å–∫–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    """
    technical_issues = analyze(headers)
    ethical_insights = []
    # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ –ø—Ä–æ–±–ª–µ–º–∞–º
    for header_name, header_value in headers.items():
        ethical_info = ethical_explain(header_name, header_value)

        if isinstance(ethical_info, dict) and 'ethical_impact' in ethical_info:
            ethical_insights.append({
                'header': header_name,
                'value': header_value,
                'ethical_impact': ethical_info['ethical_impact'],
                'privacy_risk': ethical_info.get('privacy_risk', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                'user_trust': ethical_info.get('user_trust', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            })

    return {
        'technical_issues': technical_issues,
        'ethical_insights': ethical_insights,
        'headers_analyzed': len(headers),
        'issues_count': len(technical_issues)
    }


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_headers = {
        "Content-Security-Policy": "default-src 'self' 'unsafe-inline'",
        "Strict-Transport-Security": "max-age=3600",
        "X-Frame-Options": "DENY",
        "Access-Control-Allow-Origin": "*"
    }

    # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    issues = analyze(test_headers)
    print("=== –ë–ê–ó–û–í–´–ô –ê–ù–ê–õ–ò–ó ===")
    for issue in issues:
        print(issue)

    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —ç—Ç–∏—á–µ—Å–∫–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    print("\n=== –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó ===")
    extended_results = analyze_with_ethical_context(test_headers)
    print(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {extended_results['headers_analyzed']}")
    print(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {extended_results['issues_count']}")

    for insight in extended_results['ethical_insights']:
        print(f"\n{insight['header']}:")
        print(f"  –≠—Ç–∏—á–µ—Å–∫–∏–π –∞—Å–ø–µ–∫—Ç: {insight['ethical_impact']}")
        print(f"  –†–∏—Å–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏: {insight['privacy_risk']}")
