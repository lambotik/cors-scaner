from typing import Dict, List, Optional, Tuple
import re


def analyze_security_headers(headers: Dict[str, Optional[str]]) -> Tuple[List[Dict[str, any]], List[str], int]:
    """
    –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

    Args:
        headers (Dict[str, Optional[str]]): –°–ª–æ–≤–∞—Ä—å HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤

    Returns:
        Tuple[List[Dict], List[str], int]:
            - –°–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å –∞–Ω–∞–ª–∏–∑–æ–º
            - –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
            - –û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (0-100)
    """
    try:
        print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏: {list(headers.keys())}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        security_headers = [
            {
                'name': 'Content-Security-Policy',
                'description': '–ó–∞—â–∏—Ç–∞ –æ—Ç XSS –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∫–æ–¥–∞',
                'critical': True,
                'analyzer': _analyze_csp
            },
            {
                'name': 'Strict-Transport-Security',
                'description': '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTTPS',
                'critical': True,
                'analyzer': _analyze_hsts
            },
            {
                'name': 'X-Frame-Options',
                'description': '–ó–∞—â–∏—Ç–∞ –æ—Ç clickjacking',
                'critical': True,
                'analyzer': _analyze_x_frame_options
            },
            {
                'name': 'X-Content-Type-Options',
                'description': '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ MIME-sniffing',
                'critical': False,
                'analyzer': _analyze_content_type_options
            },
            {
                'name': 'Referrer-Policy',
                'description': '–ö–æ–Ω—Ç—Ä–æ–ª—å —É—Ç–µ—á–∫–∏ referrer –¥–∞–Ω–Ω—ã—Ö',
                'critical': False,
                'analyzer': _analyze_referrer_policy
            },
            {
                'name': 'Permissions-Policy',
                'description': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∫ API –±—Ä–∞—É–∑–µ—Ä–∞',
                'critical': False,
                'analyzer': _analyze_permissions_policy
            },
            {
                'name': 'Access-Control-Allow-Origin',
                'description': 'CORS –ø–æ–ª–∏—Ç–∏–∫–∞ - —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã',
                'critical': True,
                'analyzer': _analyze_cors_origin
            },
            {
                'name': 'Access-Control-Allow-Methods',
                'description': 'CORS —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã',
                'critical': False,
                'analyzer': _analyze_cors_methods
            },
            {
                'name': 'Access-Control-Allow-Headers',
                'description': 'CORS —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏',
                'critical': False,
                'analyzer': _analyze_cors_headers
            },
            {
                'name': 'Access-Control-Allow-Credentials',
                'description': 'CORS –ø–µ—Ä–µ–¥–∞—á–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
                'critical': True,
                'analyzer': _analyze_cors_credentials
            },
            {
                'name': 'X-XSS-Protection',
                'description': '–ó–∞—â–∏—Ç–∞ –æ—Ç XSS (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è)',
                'critical': False,
                'analyzer': _analyze_xss_protection
            }
        ]

        analyzed_headers = []
        all_issues = []

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        for header_def in security_headers:
            header_name = header_def['name']
            header_value = headers.get(header_name)

            try:
                # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                analysis = header_def['analyzer'](header_value, headers)

                # –ü–†–û–í–ï–†–Ø–ï–ú, –ß–¢–û –ê–ù–ê–õ–ò–ó –í–ï–†–ù–£–õ –í–°–ï –ù–ï–û–ë–•–û–î–ò–ú–´–ï –ü–û–õ–Ø
                required_fields = ['risk', 'issues', 'warnings', 'recommendations']
                for field in required_fields:
                    if field not in analysis:
                        print(f"‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫ {header_name} –Ω–µ –≤–µ—Ä–Ω—É–ª –ø–æ–ª–µ '{field}'")
                        analysis[field] = [] if field in ['issues', 'warnings', 'recommendations'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

                analyzed_headers.append({
                    'name': header_name,
                    'present': header_value is not None,
                    'value': header_value,
                    'risk': analysis['risk'],
                    'description': header_def['description'],
                    'critical': header_def['critical'],
                    'warnings': analysis['warnings'],
                    'recommendations': analysis['recommendations']
                })

                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
                all_issues.extend(analysis['issues'])

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ {header_name}: {e}")
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ—à–∏–±–∫–æ–π
                analyzed_headers.append({
                    'name': header_name,
                    'present': header_value is not None,
                    'value': header_value,
                    'risk': '–í—ã—Å–æ–∫–∏–π',
                    'description': header_def['description'],
                    'critical': header_def['critical'],
                    'warnings': [f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"],
                    'recommendations': ["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞"]
                })
                all_issues.append(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {header_name}: {str(e)}")

        # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ CORS –ø–æ–ª–∏—Ç–∏–∫–∏
        try:
            cors_issues = _analyze_cors_comprehensive(headers)
            all_issues.extend(cors_issues)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ CORS –∞–Ω–∞–ª–∏–∑–∞: {e}")
            all_issues.append(f"‚ùå –û—à–∏–±–∫–∞ CORS –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_score = _calculate_security_score(analyzed_headers)

        print(
            f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(analyzed_headers)} –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, {len(all_issues)} –ø—Ä–æ–±–ª–µ–º, –æ—Ü–µ–Ω–∫–∞: {security_score}%")

        return analyzed_headers, all_issues, security_score

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ analyze_security_headers: {e}")
        import traceback
        traceback.print_exc()
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
        return [], [f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"], 0


def _analyze_csp(value: Optional[str], all_headers: Dict) -> Dict:
    """–ê–Ω–∞–ª–∏–∑ Content-Security-Policy"""
    issues = []
    warnings = []
    recommendations = []
    risk = "–ù–∏–∑–∫–∏–π"

    if not value:
        issues.append("‚ùå CSP –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî —Å–∞–π—Ç —É—è–∑–≤–∏–º –∫ XSS –∞—Ç–∞–∫–∞–º")
        risk = "–í—ã—Å–æ–∫–∏–π"
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∞—Å–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–∏–≤
        if "'unsafe-inline'" in value:
            warnings.append("‚ö†Ô∏è CSP —Å–æ–¥–µ—Ä–∂–∏—Ç 'unsafe-inline' - —Å–Ω–∏–∂–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
            risk = "–°—Ä–µ–¥–Ω–∏–π"

        if "'unsafe-eval'" in value:
            warnings.append("‚ö†Ô∏è CSP —Å–æ–¥–µ—Ä–∂–∏—Ç 'unsafe-eval' - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–æ")
            risk = "–°—Ä–µ–¥–Ω–∏–π"

        if "default-src *" in value or "default-src 'none'" not in value:
            if "default-src 'self'" not in value and "default-src https:" not in value:
                warnings.append("‚ö†Ô∏è CSP default-src —Å–ª–∏—à–∫–æ–º —Ä–∞–∑—Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–π")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤–∞–∂–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–∏–≤
        if "script-src" not in value:
            warnings.append("‚ÑπÔ∏è CSP –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç script-src –ø–æ–ª–∏—Ç–∏–∫—É")

        if "style-src" not in value:
            warnings.append("‚ÑπÔ∏è CSP –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç style-src –ø–æ–ª–∏—Ç–∏–∫—É")

        recommendations.append("‚úÖ CSP –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

    # –í–û–ó–í–†–ê–©–ê–ï–ú –í–°–ï –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø
    return {
        'risk': risk,
        'issues': issues,
        'warnings': warnings,
        'recommendations': recommendations
    }


def _analyze_hsts(value: Optional[str], all_headers: Dict) -> Dict:
    """–ê–Ω–∞–ª–∏–∑ Strict-Transport-Security"""
    issues = []
    warnings = []
    recommendations = []
    risk = "–ù–∏–∑–∫–∏–π"

    if not value:
        issues.append("‚ùå HSTS –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –≤–æ–∑–º–æ–∂–Ω—ã downgrade –∞—Ç–∞–∫–∏ –Ω–∞ HTTPS")
        risk = "–í—ã—Å–æ–∫–∏–π"
        return {'risk': risk, 'issues': issues, 'warnings': warnings, 'recommendations': recommendations}

    # –ü–∞—Ä—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ HSTS
    max_age_match = re.search(r'max-age=(\d+)', value)
    includes_subdomains = 'includeSubDomains' in value
    preload = 'preload' in value

    if not max_age_match:
        issues.append("‚ùå HSTS –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç max-age")
        risk = "–í—ã—Å–æ–∫–∏–π"
        return {'risk': risk, 'issues': issues, 'warnings': warnings, 'recommendations': recommendations}

    max_age = int(max_age_match.group(1))

    if max_age < 300:  # 5 –º–∏–Ω—É—Ç
        issues.append("‚ùå HSTS max-age —Å–ª–∏—à–∫–æ–º –º–∞–ª (–º–µ–Ω—å—à–µ 5 –º–∏–Ω—É—Ç)")
        risk = "–í—ã—Å–æ–∫–∏–π"
    elif max_age < 31536000:  # 1 –≥–æ–¥
        warnings.append("‚ö†Ô∏è HSTS max-age –º–µ–Ω–µ–µ –≥–æ–¥–∞ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 31536000")
        risk = "–°—Ä–µ–¥–Ω–∏–π"

    if preload and not includes_subdomains:
        issues.append("‚ùå HSTS preload —Ç—Ä–µ–±—É–µ—Ç includeSubDomains –¥–∏—Ä–µ–∫—Ç–∏–≤—É")
        risk = "–í—ã—Å–æ–∫–∏–π"

    if includes_subdomains:
        recommendations.append("‚úÖ HSTS –≤–∫–ª—é—á–∞–µ—Ç –ø–æ–¥–¥–æ–º–µ–Ω—ã")

    if preload:
        recommendations.append("‚úÖ HSTS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è preload —Å–ø–∏—Å–∫–∞")

    recommendations.append("‚úÖ HSTS –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

    return {'risk': risk, 'issues': issues, 'warnings': warnings, 'recommendations': recommendations}


def _analyze_x_frame_options(value: Optional[str], all_headers: Dict) -> Dict:
    """–ê–Ω–∞–ª–∏–∑ X-Frame-Options"""
    issues = []
    warnings = []
    recommendations = []
    risk = "–ù–∏–∑–∫–∏–π"

    if not value:
        issues.append("‚ùå X-Frame-Options –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî —Ä–∏—Å–∫ clickjacking –∞—Ç–∞–∫")
        risk = "–í—ã—Å–æ–∫–∏–π"
        return {'risk': risk, 'issues': issues, 'warnings': warnings, 'recommendations': recommendations}

    valid_values = ['DENY', 'SAMEORIGIN']
    if value.upper() not in valid_values:
        issues.append(f"‚ùå X-Frame-Options –∏–º–µ–µ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {value}")
        risk = "–í—ã—Å–æ–∫–∏–π"
    else:
        recommendations.append(f"‚úÖ X-Frame-Options –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {value}")

    return {'risk': risk, 'issues': issues, 'warnings': warnings, 'recommendations': recommendations}


def _analyze_content_type_options(value: Optional[str], all_headers: Dict) -> Dict:
    """–ê–Ω–∞–ª–∏–∑ X-Content-Type-Options"""
    issues = []
    warnings = []
    recommendations = []
    risk = "–ù–∏–∑–∫–∏–π"

    if not value:
        issues.append("‚ùå X-Content-Type-Options –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –≤–æ–∑–º–æ–∂–µ–Ω MIME-sniffing")
        risk = "–°—Ä–µ–¥–Ω–∏–π"
        return {'risk': risk, 'issues': issues, 'warnings': warnings, 'recommendations': recommendations}

    if value.lower() != 'nosniff':
        issues.append(f"‚ùå X-Content-Type-Options –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {value}")
        risk = "–°—Ä–µ–¥–Ω–∏–π"
    else:
        recommendations.append("‚úÖ X-Content-Type-Options –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

    return {'risk': risk, 'issues': issues, 'warnings': warnings, 'recommendations': recommendations}


def _analyze_referrer_policy(value: Optional[str], all_headers: Dict) -> Dict:
    """–ê–Ω–∞–ª–∏–∑ Referrer-Policy"""
    issues = []
    warnings = []
    recommendations = []
    risk = "–ù–∏–∑–∫–∏–π"

    if not value:
        warnings.append("‚ö†Ô∏è Referrer-Policy –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –≤–æ–∑–º–æ–∂–Ω–∞ —É—Ç–µ—á–∫–∞ referrer –¥–∞–Ω–Ω—ã—Ö")
        risk = "–ù–∏–∑–∫–∏–π"
        return {'risk': risk, 'issues': issues, 'warnings': warnings, 'recommendations': recommendations}

    valid_policies = [
        'no-referrer', 'no-referrer-when-downgrade', 'origin',
        'origin-when-cross-origin', 'same-origin', 'strict-origin',
        'strict-origin-when-cross-origin', 'unsafe-url'
    ]

    if value not in valid_policies:
        warnings.append(f"‚ö†Ô∏è Referrer-Policy –∏–º–µ–µ—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {value}")
    else:
        recommendations.append(f"‚úÖ Referrer-Policy –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {value}")

    return {'risk': risk, 'issues': issues, 'warnings': warnings, 'recommendations': recommendations}


def _analyze_permissions_policy(value: Optional[str], all_headers: Dict) -> Dict:
    """–ê–Ω–∞–ª–∏–∑ Permissions-Policy"""
    issues = []
    warnings = []
    recommendations = []
    risk = "–ù–∏–∑–∫–∏–π"

    if not value:
        warnings.append("‚ö†Ô∏è Permissions-Policy –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ API —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        return {'risk': risk, 'issues': issues, 'warnings': warnings, 'recommendations': recommendations}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è –æ–ø–∞—Å–Ω—ã—Ö features
    dangerous_features = ['camera', 'microphone', 'geolocation', 'payment']
    for feature in dangerous_features:
        if f"{feature}=*" in value or f"{feature}=()" not in value:
            warnings.append(f"‚ö†Ô∏è Permissions-Policy: {feature} –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º —Å–∞–π—Ç–∞–º")

    recommendations.append("‚úÖ Permissions-Policy –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

    return {'risk': risk, 'issues': issues, 'warnings': warnings, 'recommendations': recommendations}


def _analyze_cors_origin(value: Optional[str], all_headers: Dict) -> Dict:
    """–ê–Ω–∞–ª–∏–∑ Access-Control-Allow-Origin"""
    issues = []
    warnings = []
    recommendations = []
    risk = "–ù–∏–∑–∫–∏–π"

    if not value:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
        cors_headers_present = any(
            h for h in ['Access-Control-Allow-Methods', 'Access-Control-Allow-Headers',
                        'Access-Control-Allow-Credentials']
            if h in all_headers
        )
        if cors_headers_present:
            warnings.append("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Access-Control-Allow-Origin")
        return {'risk': risk, 'issues': issues, 'warnings': warnings, 'recommendations': recommendations}

    if value == "*":
        warnings.append("‚ö†Ô∏è CORS –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤ (Access-Control-Allow-Origin: *)")
        risk = "–°—Ä–µ–¥–Ω–∏–π"
    else:
        recommendations.append(f"‚úÖ CORS –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –¥–æ–º–µ–Ω–æ–º: {value}")

    return {'risk': risk, 'issues': issues, 'warnings': warnings, 'recommendations': recommendations}


def _analyze_cors_methods(value: Optional[str], all_headers: Dict) -> Dict:
    """–ê–Ω–∞–ª–∏–∑ Access-Control-Allow-Methods"""
    issues = []
    warnings = []
    recommendations = []
    risk = "–ù–∏–∑–∫–∏–π"

    if not value:
        # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç CORS –∑–∞–ø—Ä–æ—Å–æ–≤
        return {'risk': risk, 'issues': issues, 'warnings': warnings, 'recommendations': recommendations}

    dangerous_methods = ['DELETE', 'PUT', 'PATCH']
    origin = all_headers.get('Access-Control-Allow-Origin')

    if origin == "*":
        for method in dangerous_methods:
            if method in value:
                warnings.append(f"‚ö†Ô∏è –û–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥ {method} –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤")
                risk = "–°—Ä–µ–¥–Ω–∏–π"

    if value:
        recommendations.append(f"‚úÖ CORS –º–µ—Ç–æ–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: {value}")

    return {'risk': risk, 'issues': issues, 'warnings': warnings, 'recommendations': recommendations}


def _analyze_cors_headers(value: Optional[str], all_headers: Dict) -> Dict:
    """–ê–Ω–∞–ª–∏–∑ Access-Control-Allow-Headers"""
    issues = []
    warnings = []
    recommendations = []
    risk = "–ù–∏–∑–∫–∏–π"

    if not value:
        return {'risk': risk, 'issues': issues, 'warnings': warnings, 'recommendations': recommendations}

    sensitive_headers = ['authorization', 'cookie', 'proxy-authorization']
    origin = all_headers.get('Access-Control-Allow-Origin')

    if origin == "*":
        for header in sensitive_headers:
            if header in value.lower():
                warnings.append(f"‚ö†Ô∏è –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ {header} —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤")
                risk = "–°—Ä–µ–¥–Ω–∏–π"

    if value:
        recommendations.append(f"‚úÖ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: {value}")

    return {'risk': risk, 'issues': issues, 'warnings': warnings, 'recommendations': recommendations}


def _analyze_cors_credentials(value: Optional[str], all_headers: Dict) -> Dict:
    """–ê–Ω–∞–ª–∏–∑ Access-Control-Allow-Credentials"""
    issues = []
    warnings = []
    recommendations = []
    risk = "–ù–∏–∑–∫–∏–π"

    if not value:
        return {'risk': risk, 'issues': issues, 'warnings': warnings, 'recommendations': recommendations}

    origin = all_headers.get('Access-Control-Allow-Origin')

    if value.lower() == "true" and origin == "*":
        issues.append("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û: CORS credentials=true –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å origin=* - –±—Ä–∞—É–∑–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å!")
        risk = "–í—ã—Å–æ–∫–∏–π"
    elif value.lower() == "true":
        warnings.append("‚ö†Ô∏è CORS —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –ø–µ—Ä–µ–¥–∞—á–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        risk = "–°—Ä–µ–¥–Ω–∏–π"
    else:
        recommendations.append("‚úÖ CORS credentials –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

    return {'risk': risk, 'issues': issues, 'warnings': warnings, 'recommendations': recommendations}


def _analyze_xss_protection(value: Optional[str], all_headers: Dict) -> Dict:
    """–ê–Ω–∞–ª–∏–∑ X-XSS-Protection"""
    issues = []
    warnings = []
    recommendations = []
    risk = "–ù–∏–∑–∫–∏–π"

    if not value:
        warnings.append("‚ÑπÔ∏è X-XSS-Protection –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫)")
        return {'risk': risk, 'issues': issues, 'warnings': warnings, 'recommendations': recommendations}

    if "1; mode=block" not in value:
        warnings.append("‚ö†Ô∏è X-XSS-Protection –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç mode=block")

    recommendations.append("‚úÖ X-XSS-Protection –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ CSP –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞—â–∏—Ç—ã)")

    return {'risk': risk, 'issues': issues, 'warnings': warnings, 'recommendations': recommendations}


def _analyze_cors_comprehensive(headers: Dict[str, Optional[str]]) -> List[str]:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ CORS –ø–æ–ª–∏—Ç–∏–∫–∏"""
    issues = []

    origin = headers.get('Access-Control-Allow-Origin')
    credentials = headers.get('Access-Control-Allow-Credentials')
    methods = headers.get('Access-Control-Allow-Methods')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∞—Å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
    if origin == "*" and credentials and credentials.lower() == "true":
        issues.append("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û: –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è CORS –ø–æ–ª–∏—Ç–∏–∫–∞ - credentials=true —Å origin=*")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    if origin == "*" and methods and any(method in methods for method in ['DELETE', 'PUT', 'PATCH']):
        issues.append("‚ö†Ô∏è –û–ø–∞—Å–Ω—ã–µ HTTP –º–µ—Ç–æ–¥—ã (DELETE/PUT/PATCH) –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è CORS –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥—Ä—É–≥–∏—Ö CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    cors_headers = [h for h in headers if h.startswith('Access-Control-')]
    if len(cors_headers) > 0 and not origin:
        issues.append("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Access-Control-Allow-Origin")

    return issues


def _calculate_security_score(analyzed_headers: List[Dict]) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (0-100)"""

    if not analyzed_headers:
        return 0

    total_weight = 0
    weighted_score = 0

    for header in analyzed_headers:
        # –í–µ—Å –∑–∞–≥–æ–ª–æ–≤–∫–∞: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ = 3, –æ–±—ã—á–Ω—ã–µ = 1
        weight = 3 if header['critical'] else 1

        # –û—á–∫–∏ –∑–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫: –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç = 1, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç = 0
        # –®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: -0.5 –∑–∞ –∫–∞–∂–¥–æ–µ
        score = 1 if header['present'] else 0

        if header['present']:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º warnings –≤–º–µ—Å—Ç–æ issues
            warnings_count = len(header.get('warnings', []))
            score -= min(0.5 * warnings_count, 0.5)  # –ú–∞–∫—Å —à—Ç—Ä–∞—Ñ -0.5

        score = max(0, score)  # –ù–µ –º–µ–Ω—å—à–µ 0

        total_weight += weight
        weighted_score += score * weight

    if total_weight == 0:
        return 0

    final_score = int((weighted_score / total_weight) * 100)
    return min(100, max(0, final_score))

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

def analyze(headers: Dict[str, Optional[str]]) -> List[str]:
    """
    –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º.
    """
    _, issues, _ = analyze_security_headers(headers)
    return issues


def get_security_headers_analysis(headers: Dict[str, Optional[str]]) -> Dict[str, any]:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö.

    Returns:
        Dict —Å –ø–æ–ª–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    """
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        analyzed_headers, issues, score = analyze_security_headers(headers)

        return {
            'headers': analyzed_headers,
            'issues': issues,
            'security_score': score,
            'total_headers': len(analyzed_headers),
            'present_headers': sum(1 for h in analyzed_headers if h['present']),
            'critical_headers_present': sum(1 for h in analyzed_headers if h['critical'] and h['present'])
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_security_headers_analysis: {e}")
        import traceback
        traceback.print_exc()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return {
            'headers': [],
            'issues': [f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {str(e)}"],
            'security_score': 0,
            'total_headers': 0,
            'present_headers': 0,
            'critical_headers_present': 0
        }


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    test_headers = {
        "Content-Security-Policy": "default-src 'self'; script-src 'self'",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "X-Frame-Options": "DENY",
        "X-Content-Type-Options": "nosniff",
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Credentials": "true"
    }

    # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    full_analysis = get_security_headers_analysis(test_headers)

    print(f"–û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {full_analysis['security_score']}%")
    print(f"–ó–∞–≥–æ–ª–æ–≤–∫–æ–≤: {full_analysis['present_headers']}/{full_analysis['total_headers']}")
    print("\n–ü—Ä–æ–±–ª–µ–º—ã:")
    for issue in full_analysis['issues']:
        print(f"  {issue}")

    print("\n–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:")
    for header in full_analysis['headers']:
        status = "‚úÖ" if header['present'] else "‚ùå"
        print(f"  {status} {header['name']}: {header['risk']} ({header['category']})")
        for warning in header['warnings']:
            print(f"    {warning}")
