import requests
import time
from urllib.parse import urlparse
from typing import Dict, List, Any


def scan_headers(url: str) -> Dict[str, Any]:
    """
    –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
    """
    start_time = time.time()

    try:
        results = {
            'target': url,
            'final_url': url,
            'security_score': 0,
            'scan_duration': 0,
            'http_status': 0,
            'present_headers': 0,
            'total_headers': 11,
            'headers': [],
            'issues': [],
            'recommendations': [],
            'risk_level': '–ù–∏–∑–∫–∏–π',
            'cors_analysis': {},
            'redirects': False,
            'server_info': '',
            'scan_details': {}
        }

        # 1. –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ –∏ —Å–µ—Ä–≤–µ—Ä–∞
        print(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {url}")
        response = requests.get(
            url,
            timeout=10,
            allow_redirects=True,
            headers={'User-Agent': 'Security-Scanner/2.0'}
        )

        results['final_url'] = response.url
        results['http_status'] = response.status_code
        results['redirects'] = (url != response.url)
        results['server_info'] = response.headers.get('Server', '–ù–µ —É–∫–∞–∑–∞–Ω')

        # 2. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ security headers
        security_analysis = analyze_security_headers(response)
        results['headers'] = security_analysis['headers']
        results['issues'] = security_analysis['issues']
        results['recommendations'] = security_analysis['recommendations']
        results['present_headers'] = security_analysis['present_headers']

        # 3. –£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π CORS –∞–Ω–∞–ª–∏–∑
        cors_results = analyze_cors_policy(url, response)
        results['cors_analysis'] = cors_results
        results['issues'].extend(cors_results.get('issues', []))
        results['recommendations'].extend(cors_results.get('recommendations', []))

        # 4. –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        final_scores = calculate_security_metrics(results)
        results['security_score'] = final_scores['score']
        results['risk_level'] = final_scores['risk_level']
        results['scan_duration'] = round(time.time() - start_time, 2)
        results['scan_details'] = final_scores['details']

        return results

    except requests.exceptions.RequestException as e:
        return create_error_response(url, start_time, f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
    except Exception as e:
        return create_error_response(url, start_time, f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")


def analyze_security_headers(response) -> Dict[str, Any]:
    """
    –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    """
    headers = []
    issues = []
    recommendations = []
    present_headers = 0

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
    headers_config = [
        {
            'name': 'Content-Security-Policy',
            'critical': True,
            'description': '–ó–∞—â–∏—Ç–∞ –æ—Ç XSS –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∫–æ–¥–∞',
            'risk_description': '–ë–µ–∑ CSP —Å–∞–π—Ç —É—è–∑–≤–∏–º –∫ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏ XSS –∞—Ç–∞–∫–∞–º',
            'recommendation': '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ CSP —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏, –∏–∑–±–µ–≥–∞—è unsafe-inline –∏ unsafe-eval'
        },
        {
            'name': 'Strict-Transport-Security',
            'critical': True,
            'description': '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTTPS',
            'risk_description': '–ë–µ–∑ HSTS –≤–æ–∑–º–æ–∂–Ω—ã downgrade –∞—Ç–∞–∫–∏ –∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç —Ç—Ä–∞—Ñ–∏–∫–∞',
            'recommendation': '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ HSTS —Å max-age –Ω–µ –º–µ–Ω–µ–µ 31536000 –∏ includeSubDomains'
        },
        {
            'name': 'X-Frame-Options',
            'critical': True,
            'description': '–ó–∞—â–∏—Ç–∞ –æ—Ç clickjacking',
            'risk_description': '–ë–µ–∑ –∑–∞—â–∏—Ç—ã —Å–∞–π—Ç –º–æ–∂–Ω–æ –≤—Å—Ç—Ä–æ–∏—Ç—å –≤ iframe –¥–ª—è –æ–±–º–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π',
            'recommendation': '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ X-Frame-Options: DENY –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç—ã'
        },
        {
            'name': 'X-Content-Type-Options',
            'critical': True,
            'description': '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ MIME-sniffing',
            'risk_description': '–ë—Ä–∞—É–∑–µ—Ä –º–æ–∂–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞, —á—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —É—è–∑–≤–∏–º–æ—Å—Ç—è–º',
            'recommendation': '–í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ X-Content-Type-Options: nosniff'
        },
        {
            'name': 'Referrer-Policy',
            'critical': False,
            'description': '–ö–æ–Ω—Ç—Ä–æ–ª—å —É—Ç–µ—á–∫–∏ referrer –¥–∞–Ω–Ω—ã—Ö',
            'risk_description': '–ú–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —É—Ç–µ—á–∫–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ URL',
            'recommendation': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ strict-origin-when-cross-origin –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏'
        },
        {
            'name': 'Permissions-Policy',
            'critical': False,
            'description': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∫ API –±—Ä–∞—É–∑–µ—Ä–∞',
            'risk_description': '–°–∞–π—Ç –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ, –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            'recommendation': '–û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º API: camera=(), microphone=(), geolocation=()'
        },
        {
            'name': 'Access-Control-Allow-Origin',
            'critical': False,
            'description': 'CORS –ø–æ–ª–∏—Ç–∏–∫–∞ - —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã',
            'risk_description': '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å API –¥–ª—è –ª—é–±—ã—Ö –¥–æ–º–µ–Ω–æ–≤',
            'recommendation': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã –≤–º–µ—Å—Ç–æ *, –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ Origin –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ'
        },
        {
            'name': 'Access-Control-Allow-Methods',
            'critical': False,
            'description': 'CORS —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã',
            'risk_description': '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ–ø–∞—Å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ (PUT, DELETE) –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —É—è–∑–≤–∏–º–æ—Å—Ç—è–º',
            'recommendation': '–†–∞–∑—Ä–µ—à–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã (GET, POST)'
        },
        {
            'name': 'Access-Control-Allow-Headers',
            'critical': False,
            'description': 'CORS —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏',
            'risk_description': '–ò–∑–±—ã—Ç–æ—á–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –º–æ–≥—É—Ç –æ–±–æ–π—Ç–∏ –∑–∞—â–∏—Ç—É',
            'recommendation': '–†–∞–∑—Ä–µ—à–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏'
        },
        {
            'name': 'Access-Control-Allow-Credentials',
            'critical': False,
            'description': 'CORS –ø–µ—Ä–µ–¥–∞—á–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
            'risk_description': '–í —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å ACAO: * —Å–æ–∑–¥–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é —É—è–∑–≤–∏–º–æ—Å—Ç—å',
            'recommendation': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —Å —Å—Ç—Ä–æ–≥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π Origin'
        },
        {
            'name': 'X-XSS-Protection',
            'critical': False,
            'description': '–ó–∞—â–∏—Ç–∞ –æ—Ç XSS (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è)',
            'risk_description': '–£—Å—Ç–∞—Ä–µ–≤—à–∞—è –∑–∞—â–∏—Ç–∞, –Ω–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö',
            'recommendation': '–ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ Content-Security-Policy –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞—â–∏—Ç—ã'
        }
    ]

    for config in headers_config:
        header_name = config['name']
        header_value = response.headers.get(header_name)
        is_present = header_value is not None

        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        analysis = analyze_header_quality(header_name, header_value, is_present)

        header_data = {
            'name': header_name,
            'present': is_present,
            'value': header_value,
            'critical': config['critical'],
            'description': config['description'],
            'risk_description': config['risk_description'],
            'recommendation': config['recommendation'],
            'risk_level': analysis['risk_level'],
            'quality_score': analysis['quality_score'],
            'notes': analysis['notes']
        }

        headers.append(header_data)

        if is_present:
            present_headers += 1
            issues.extend(analysis['issues'])
            recommendations.extend(analysis['recommendations'])
        else:
            if config['critical']:
                issues.append(f"‚ùå {header_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî {config['risk_description']}")
                recommendations.append(f"üí° {config['recommendation']}")
            else:
                issues.append(f"‚ö†Ô∏è {header_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî {config['risk_description']}")

    return {
        'headers': headers,
        'issues': issues,
        'recommendations': recommendations,
        'present_headers': present_headers
    }


def analyze_header_quality(header_name: str, value: str, is_present: bool) -> Dict[str, Any]:
    """
    –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    """
    analysis = {
        'risk_level': '–ù–∏–∑–∫–∏–π',
        'quality_score': 100,
        'notes': [],
        'issues': [],
        'recommendations': []
    }

    if not is_present:
        analysis['risk_level'] = '–í—ã—Å–æ–∫–∏–π' if header_name in ['Content-Security-Policy', 'Strict-Transport-Security',
                                                              'X-Frame-Options'] else '–°—Ä–µ–¥–Ω–∏–π'
        analysis['quality_score'] = 0
        return analysis

    # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    if header_name == 'Content-Security-Policy':
        if 'unsafe-inline' in value:
            analysis['risk_level'] = '–°—Ä–µ–¥–Ω–∏–π'
            analysis['quality_score'] = 60
            analysis['issues'].append('CSP —Å–æ–¥–µ—Ä–∂–∏—Ç unsafe-inline - —Å–Ω–∏–∂–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å')
            analysis['recommendations'].append('–ó–∞–º–µ–Ω–∏—Ç–µ unsafe-inline –Ω–∞ nonce –∏–ª–∏ hash')
        if 'unsafe-eval' in value:
            analysis['risk_level'] = '–°—Ä–µ–¥–Ω–∏–π'
            analysis['quality_score'] = max(analysis['quality_score'] - 20, 0)
            analysis['issues'].append('CSP —Å–æ–¥–µ—Ä–∂–∏—Ç unsafe-eval - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–æ')
        if "'self'" in value and not any(x in value for x in ['unsafe-inline', 'unsafe-eval', '*']):
            analysis['notes'].append('CSP –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏')

    elif header_name == 'Strict-Transport-Security':
        if 'max-age=31536000' in value:
            analysis['notes'].append('HSTS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –≥–æ–¥ - –æ—Ç–ª–∏—á–Ω–æ')
        if 'includeSubDomains' in value:
            analysis['notes'].append('HSTS –≤–∫–ª—é—á–∞–µ—Ç –ø–æ–¥–¥–æ–º–µ–Ω—ã - –ø—Ä–∞–≤–∏–ª—å–Ω–æ')
        else:
            analysis['risk_level'] = '–°—Ä–µ–¥–Ω–∏–π'
            analysis['issues'].append('HSTS –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç –ø–æ–¥–¥–æ–º–µ–Ω—ã')

    elif header_name == 'X-Frame-Options':
        if value == 'DENY':
            analysis['notes'].append('–ü–æ–ª–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç clickjacking')
        elif value == 'SAMEORIGIN':
            analysis['risk_level'] = '–ù–∏–∑–∫–∏–π'
            analysis['notes'].append('–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞—â–∏—Ç–∞ - —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ —Å —Ç–æ–≥–æ –∂–µ origin')

    elif header_name == 'Access-Control-Allow-Origin':
        if value == '*':
            analysis['risk_level'] = '–í—ã—Å–æ–∫–∏–π'
            analysis['quality_score'] = 30
            analysis['issues'].append('CORS –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å')
            analysis['recommendations'].append('–ó–∞–º–µ–Ω–∏—Ç–µ * –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã')
        elif value and value != '*':
            analysis['notes'].append('CORS –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏ - –±–µ–∑–æ–ø–∞—Å–Ω–æ')

    elif header_name == 'Access-Control-Allow-Credentials':
        if value == 'true':
            analysis['risk_level'] = '–í—ã—Å–æ–∫–∏–π'
            analysis['issues'].append('CORS —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
            analysis['recommendations'].append('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ACAO –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ *')

    return analysis


def analyze_cors_policy(target_url: str, base_response) -> Dict[str, Any]:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ CORS –ø–æ–ª–∏—Ç–∏–∫–∏
    """
    cors_results = {
        'simple_request': {},
        'preflight_request': {},
        'with_credentials': {},
        'security_level': '–í—ã—Å–æ–∫–∏–π',
        'issues': [],
        'recommendations': []
    }

    # –ê–Ω–∞–ª–∏–∑ –±–∞–∑–æ–≤—ã—Ö CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    acao = base_response.headers.get('Access-Control-Allow-Origin')
    acac = base_response.headers.get('Access-Control-Allow-Credentials')

    if acao == '*':
        cors_results['security_level'] = '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π'
        cors_results['issues'].append('üö® CORS –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤ (*)')
        cors_results['recommendations'].append('üîí –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á—å—Ç–µ CORS –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏')
    elif acao and acac == 'true':
        cors_results['security_level'] = '–í—ã—Å–æ–∫–∏–π'
        cors_results['issues'].append('‚ö†Ô∏è CORS —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω')
        cors_results['recommendations'].append('üîê –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Å—Ç—Ä–æ–≥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ Origin –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ')
    elif acao:
        cors_results['security_level'] = '–ù–∏–∑–∫–∏–π'
        cors_results['recommendations'].append('‚úÖ CORS –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')

    return cors_results


def calculate_security_metrics(results: Dict[str, Any]) -> Dict[str, Any]:
    """
    –†–∞—Å—á–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    """
    total_score = 0
    max_score = 100

    # 1. –ë–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (50%)
    present_headers = results.get('present_headers', 0)
    total_headers = results.get('total_headers', 11)
    base_score = (present_headers / total_headers) * 50

    # 2. –ö–∞—á–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (30%)
    quality_score = 0
    for header in results.get('headers', []):
        quality_score += header.get('quality_score', 0)
    quality_score = (quality_score / len(results.get('headers', [1]))) * 0.3

    # 3. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (20%)
    critical_headers = ['Content-Security-Policy', 'Strict-Transport-Security', 'X-Frame-Options']
    critical_present = sum(1 for h in results.get('headers', []) if h['name'] in critical_headers and h['present'])
    critical_score = (critical_present / 3) * 20

    total_score = base_score + quality_score + critical_score

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
    if total_score >= 80:
        risk_level = '–ù–∏–∑–∫–∏–π'
    elif total_score >= 60:
        risk_level = '–°—Ä–µ–¥–Ω–∏–π'
    elif total_score >= 40:
        risk_level = '–í—ã—Å–æ–∫–∏–π'
    else:
        risk_level = '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π'

    return {
        'score': min(100, int(total_score)),
        'risk_level': risk_level,
        'details': {
            'base_headers_score': int(base_score),
            'quality_score': int(quality_score),
            'critical_headers_score': int(critical_score),
            'critical_headers_present': f"{critical_present}/3"
        }
    }


def create_error_response(url: str, start_time: float, error_msg: str) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
    return {
        'target': url,
        'error': error_msg,
        'security_score': 0,
        'risk_level': '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω',
        'scan_duration': round(time.time() - start_time, 2),
        'headers': [],
        'issues': [f"‚ùå {error_msg}"],
        'recommendations': ['üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ']
    }