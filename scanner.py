import requests
from datetime import datetime
from requests.structures import CaseInsensitiveDict


def scan_headers(url):
    print(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {url}")

    result = {
        "target": url,
        "date": datetime.now().strftime("%Y-%m-%d %H:%M"),
        "headers": [],
        "issues": [],
        "security_score": 0,
        "total_headers": 8,
        "error": False
    }

    try:
        print("üîó –í—ã–ø–æ–ª–Ω—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å...")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        }

        response = requests.get(
            url,
            timeout=15,
            headers=headers,
            allow_redirects=True,
            verify=True
        )

        response_headers = CaseInsensitiveDict(response.headers)

        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üì® –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: {list(response_headers.keys())}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        headers_to_check = {
            "Content-Security-Policy": "–£—è–∑–≤–∏–º–æ—Å—Ç—å –∫ XSS",
            "Strict-Transport-Security": "Downgrade-–∞—Ç–∞–∫–∏ —á–µ—Ä–µ–∑ HTTP",
            "X-Frame-Options": "Clickjacking",
            "X-Content-Type-Options": "MIME-sniffing",
            "Referrer-Policy": "–£—Ç–µ—á–∫–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞",
            "Permissions-Policy": "–î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±—Ä–∞—É–∑–µ—Ä–∞",
            "X-XSS-Protection": "–ó–∞—â–∏—Ç–∞ –æ—Ç XSS",
            "Cache-Control": "–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
        }

        found_count = 0

        for header, risk in headers_to_check.items():
            present = header in response_headers
            header_value = response_headers.get(header)

            result["headers"].append({
                "name": header,
                "present": present,
                "value": header_value,
                "risk": risk
            })

            if present:
                found_count += 1
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫: {header} = {header_value[:100] if header_value else 'None'}...")

                # –ê–Ω–∞–ª–∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π
                if header == "Content-Security-Policy":
                    if "'unsafe-inline'" in header_value:
                        result["issues"].append(f"‚ö†Ô∏è {header} —Å–æ–¥–µ—Ä–∂–∏—Ç 'unsafe-inline' - —Å–Ω–∏–∂–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
                    if "'unsafe-eval'" in header_value:
                        result["issues"].append(f"‚ö†Ô∏è {header} —Å–æ–¥–µ—Ä–∂–∏—Ç 'unsafe-eval' - —Å–Ω–∏–∂–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")

                elif header == "Strict-Transport-Security":
                    if "max-age=0" in header_value:
                        result["issues"].append(f"‚ö†Ô∏è {header} –∏–º–µ–µ—Ç max-age=0 - HSTS –æ—Ç–∫–ª—é—á–µ–Ω")

                elif header == "X-Frame-Options":
                    if header_value.upper() not in ["DENY", "SAMEORIGIN"]:
                        result["issues"].append(f"‚ö†Ô∏è {header} –∏–º–µ–µ—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {header_value}")

            else:
                result["issues"].append(f"‚ùå {header} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî {risk}")
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫: {header}")

        # –°—á–∏—Ç–∞–µ–º score
        result["security_score"] = int((found_count / len(headers_to_check)) * 100)

        print(f"üìä –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. Score: {result['security_score']}%")
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {found_count}/{len(headers_to_check)}")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É
        if result["security_score"] >= 80:
            result["issues"].insert(0, "‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤!")
        elif result["security_score"] >= 60:
            result["issues"].insert(0, "‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        else:
            result["issues"].insert(0, "üö® –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

    except requests.exceptions.Timeout:
        error_msg = "‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (–±–æ–ª–µ–µ 15 —Å–µ–∫—É–Ω–¥)"
        print(error_msg)
        result["error"] = True
        result["issues"].append(error_msg)

    except requests.exceptions.ConnectionError:
        error_msg = "üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∞–π—Ç—É"
        print(error_msg)
        result["error"] = True
        result["issues"].append(error_msg)

    except requests.exceptions.RequestException as e:
        error_msg = f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}"
        print(error_msg)
        result["error"] = True
        result["issues"].append(error_msg)

    except Exception as e:
        error_msg = f"‚öôÔ∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        print(error_msg)
        result["error"] = True
        result["issues"].append(error_msg)

    return result