import requests
import time
from urllib.parse import urlparse
from typing import Dict, List, Any


def scan_headers(url: str) -> Dict[str, Any]:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π CORS –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    """
    start_time = time.time()

    try:
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        results = {
            'target': url,
            'final_url': url,
            'security_score': 0,
            'scan_duration': 0,
            'http_status': 0,
            'present_headers': 0,
            'total_headers': 11,
            'headers': [],
            'issues': [],
            'cors_analysis': {},  # –ù–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ CORS –∞–Ω–∞–ª–∏–∑–∞
            'redirects': False
        }

        # 1. –ë–∞–∑–æ–≤—ã–π GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        print(f"üîç –ë–∞–∑–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {url}")
        response = requests.get(
            url,
            timeout=10,
            allow_redirects=True,
            headers={'User-Agent': 'Security-Scanner/1.0'}
        )

        results['final_url'] = response.url
        results['http_status'] = response.status_code
        results['redirects'] = (url != response.url)

        # –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö security headers
        security_headers = analyze_security_headers(response)
        results['headers'] = security_headers['headers']
        results['issues'] = security_headers['issues']
        results['present_headers'] = security_headers['present_headers']

        # 2. –î–µ—Ç–∞–ª—å–Ω—ã–π CORS –∞–Ω–∞–ª–∏–∑
        print(f"üåê –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π CORS –∞–Ω–∞–ª–∏–∑: {url}")
        cors_results = analyze_cors_policy(url, response)
        results['cors_analysis'] = cors_results
        results['issues'].extend(cors_results.get('issues', []))

        # 3. –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏
        results['security_score'] = calculate_security_score(results)
        results['scan_duration'] = round(time.time() - start_time, 2)

        return results

    except requests.exceptions.RequestException as e:
        return {
            'target': url,
            'error': f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}",
            'security_score': 0,
            'scan_duration': round(time.time() - start_time, 2),
            'headers': [],
            'issues': [f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∞–π—Ç—É: {str(e)}"]
        }
    except Exception as e:
        return {
            'target': url,
            'error': f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}",
            'security_score': 0,
            'scan_duration': round(time.time() - start_time, 2),
            'headers': [],
            'issues': [f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"]
        }


def analyze_cors_policy(target_url: str, base_response) -> Dict[str, Any]:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ CORS –ø–æ–ª–∏—Ç–∏–∫–∏
    """
    cors_results = {
        'simple_request': {},
        'preflight_request': {},
        'with_credentials': {},
        'wildcard_test': {},
        'issues': []
    }

    parsed_url = urlparse(target_url)
    domain = f"{parsed_url.scheme}://{parsed_url.netloc}"

    # –¢–µ—Å—Ç–æ–≤—ã–µ Origin –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CORS
    test_origins = [
        'https://example.com',
        'https://malicious-site.com',
        'http://localhost:3000',
        'null'
    ]

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ CORS –∑–∞–ø—Ä–æ—Å–∞
    print("  üì§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ CORS –∑–∞–ø—Ä–æ—Å–∞...")
    try:
        for origin in test_origins:
            test_response = requests.get(
                target_url,
                timeout=5,
                headers={'Origin': origin}
            )

            cors_headers = {
                'acao': test_response.headers.get('Access-Control-Allow-Origin'),
                'acam': test_response.headers.get('Access-Control-Allow-Methods'),
                'acah': test_response.headers.get('Access-Control-Allow-Headers'),
                'acac': test_response.headers.get('Access-Control-Allow-Credentials')
            }

            if any(cors_headers.values()):
                cors_results['simple_request'][origin] = cors_headers

                # –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                if cors_headers['acao'] == '*':
                    cors_results['issues'].append(
                        f"‚ö†Ô∏è CORS –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤ (*) —Å Origin: {origin}"
                    )
                elif cors_headers['acao'] == origin:
                    cors_results['issues'].append(
                        f"‚úÖ CORS –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è Origin: {origin}"
                    )

    except Exception as e:
        cors_results['issues'].append(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CORS: {str(e)}")

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Preflight –∑–∞–ø—Ä–æ—Å–∞ (OPTIONS)
    print("  üì• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Preflight –∑–∞–ø—Ä–æ—Å–∞...")
    try:
        options_response = requests.options(
            target_url,
            timeout=5,
            headers={
                'Origin': 'https://example.com',
                'Access-Control-Request-Method': 'POST',
                'Access-Control-Request-Headers': 'X-Custom-Header'
            }
        )

        if options_response.status_code != 405:  # Method Not Allowed - –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            cors_results['preflight_request'] = {
                'status': options_response.status_code,
                'acao': options_response.headers.get('Access-Control-Allow-Origin'),
                'acam': options_response.headers.get('Access-Control-Allow-Methods'),
                'acah': options_response.headers.get('Access-Control-Allow-Headers'),
                'acac': options_response.headers.get('Access-Control-Allow-Credentials'),
                'acam_age': options_response.headers.get('Access-Control-Max-Age')
            }

            if options_response.headers.get('Access-Control-Allow-Methods'):
                cors_results['issues'].append(
                    f"‚úÖ Preflight –∑–∞–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
                )

    except Exception as e:
        cors_results['issues'].append(f"‚ùå –û—à–∏–±–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS —Å credentials
    print("  üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CORS —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    try:
        creds_response = requests.get(
            target_url,
            timeout=5,
            headers={'Origin': 'https://example.com'},
            cookies={'test': 'value'}
        )

        acac = creds_response.headers.get('Access-Control-Allow-Credentials')
        acao = creds_response.headers.get('Access-Control-Allow-Origin')

        cors_results['with_credentials'] = {
            'allow_credentials': acac,
            'allow_origin': acao
        }

        if acac == 'true' and acao == '*':
            cors_results['issues'].append(
                "üö® –û–ü–ê–°–ù–û: CORS —Å credentials —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤ (*)"
            )
        elif acac == 'true':
            cors_results['issues'].append(
                "‚ö†Ô∏è CORS —Å credentials —Ä–∞–∑—Ä–µ—à–µ–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Origin)"
            )

    except Exception as e:
        cors_results['issues'].append(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è credentials: {str(e)}")

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    base_cors_headers = [
        'Access-Control-Allow-Origin',
        'Access-Control-Allow-Methods',
        'Access-Control-Allow-Headers',
        'Access-Control-Allow-Credentials'
    ]

    missing_cors = []
    for header in base_cors_headers:
        if header not in base_response.headers:
            missing_cors.append(header)

    if missing_cors:
        cors_results['issues'].append(
            f"‚ÑπÔ∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏: {', '.join(missing_cors)}"
        )

    return cors_results


def analyze_security_headers(response) -> Dict[str, Any]:
    """
    –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞)
    """
    headers = []
    issues = []
    present_headers = 0

    security_headers_config = [
        {
            'name': 'Content-Security-Policy',
            'critical': True,
            'description': '–ó–∞—â–∏—Ç–∞ –æ—Ç XSS –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∫–æ–¥–∞'
        },
        {
            'name': 'Strict-Transport-Security',
            'critical': True,
            'description': '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTTPS'
        },
        {
            'name': 'X-Frame-Options',
            'critical': True,
            'description': '–ó–∞—â–∏—Ç–∞ –æ—Ç clickjacking'
        },
        {
            'name': 'X-Content-Type-Options',
            'critical': False,
            'description': '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ MIME-sniffing'
        },
        {
            'name': 'X-XSS-Protection',
            'critical': False,
            'description': '–ó–∞—â–∏—Ç–∞ –æ—Ç XSS (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è)'
        },
        {
            'name': 'Referrer-Policy',
            'critical': False,
            'description': '–ö–æ–Ω—Ç—Ä–æ–ª—å —É—Ç–µ—á–∫–∏ referrer –¥–∞–Ω–Ω—ã—Ö'
        },
        {
            'name': 'Permissions-Policy',
            'critical': False,
            'description': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∫ API –±—Ä–∞—É–∑–µ—Ä–∞'
        },
        # CORS headers
        {
            'name': 'Access-Control-Allow-Origin',
            'critical': False,
            'description': 'CORS –ø–æ–ª–∏—Ç–∏–∫–∞ - —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã'
        },
        {
            'name': 'Access-Control-Allow-Methods',
            'critical': False,
            'description': 'CORS —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã'
        },
        {
            'name': 'Access-Control-Allow-Headers',
            'critical': False,
            'description': 'CORS —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏'
        },
        {
            'name': 'Access-Control-Allow-Credentials',
            'critical': False,
            'description': 'CORS –ø–µ—Ä–µ–¥–∞—á–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'
        }
    ]

    for config in security_headers_config:
        header_name = config['name']
        header_value = response.headers.get(header_name)
        is_present = header_value is not None

        if is_present:
            present_headers += 1

            # –ê–Ω–∞–ª–∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            if header_name == 'Access-Control-Allow-Origin' and header_value == '*':
                issues.append("‚ö†Ô∏è CORS –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤ (Access-Control-Allow-Origin: *)")
            elif header_name == 'Access-Control-Allow-Credentials' and header_value == 'true':
                issues.append("‚ö†Ô∏è CORS —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            elif header_name == 'Strict-Transport-Security' and 'max-age=0' in header_value:
                issues.append("‚ö†Ô∏è HSTS –æ—Ç–∫–ª—é—á–µ–Ω (max-age=0)")

        elif config['critical']:
            issues.append(f"‚ùå {header_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        else:
            issues.append(f"‚ö†Ô∏è {header_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–ª—è API")

        headers.append({
            'name': header_name,
            'present': is_present,
            'value': header_value,
            'critical': config['critical'],
            'risk': '–í—ã—Å–æ–∫–∏–π' if config['critical'] and not is_present else '–ù–∏–∑–∫–∏–π'
        })

    return {
        'headers': headers,
        'issues': issues,
        'present_headers': present_headers
    }


def calculate_security_score(results: Dict[str, Any]) -> int:
    """
    –†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º CORS –∞–Ω–∞–ª–∏–∑–∞
    """
    base_score = 0
    max_score = 100

    # –ë–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (70% –æ—Ü–µ–Ω–∫–∏)
    present_headers = results.get('present_headers', 0)
    total_headers = results.get('total_headers', 11)
    base_score += (present_headers / total_headers) * 70

    # CORS –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (30% –æ—Ü–µ–Ω–∫–∏)
    cors_issues = results.get('cors_analysis', {}).get('issues', [])
    dangerous_cors = sum(1 for issue in cors_issues if '–û–ü–ê–°–ù–û' in issue or '–æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö' in issue)

    if dangerous_cors == 0:
        base_score += 30
    elif dangerous_cors == 1:
        base_score += 15
    elif dangerous_cors == 2:
        base_score += 5

    return min(100, int(base_score))