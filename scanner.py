import requests
from datetime import datetime
from requests.structures import CaseInsensitiveDict


def scan_headers(url):
    print(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {url}")

    result = {
        "target": url,
        "date": datetime.now().strftime("%Y-%m-%d %H:%M"),
        "headers": [],
        "issues": [],
        "security_score": 0,
        "total_headers": 7,
        "error": False
    }

    try:
        print("üîó –í—ã–ø–æ–ª–Ω—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å...")
        response = requests.get(url, timeout=10)
        headers = CaseInsensitiveDict(response.headers)  # –†–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π —Å–ª–æ–≤–∞—Ä—å

        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, —Å—Ç–∞—Ç—É—Å: {response.status_code}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers_to_check = {
            "Content-Security-Policy": "–£—è–∑–≤–∏–º–æ—Å—Ç—å –∫ XSS",
            "Strict-Transport-Security": "Downgrade-–∞—Ç–∞–∫–∏ —á–µ—Ä–µ–∑ HTTP",
            "X-Frame-Options": "Clickjacking",
            "X-Content-Type-Options": "MIME-sniffing",
            "Referrer-Policy": "–£—Ç–µ—á–∫–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞",
            "Permissions-Policy": "–î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±—Ä–∞—É–∑–µ—Ä–∞"
        }

        for header, risk in headers_to_check.items():
            present = header in headers
            header_value = headers.get(header)

            result["headers"].append({
                "name": header,
                "present": present,
                "value": header_value,
                "risk": risk
            })

            if present:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫: {header} = {header_value[:50]}...")
            else:
                result["issues"].append(f"{header} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî {risk}")

        # –°—á–∏—Ç–∞–µ–º score
        found = sum(1 for h in result["headers"] if h["present"])
        result["security_score"] = int((found / len(headers_to_check)) * 100)

        print(f"üìä –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. Score: {result['security_score']}%")
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {found}/{len(headers_to_check)}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        result["error"] = True
        result["issues"].append(f"–û—à–∏–±–∫–∞: {str(e)}")

    return result