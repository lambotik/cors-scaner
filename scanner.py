import requests
from datetime import datetime
from urllib.parse import urlparse
import re

SECURITY_HEADERS = {
    "Content-Security-Policy": "–£—è–∑–≤–∏–º–æ—Å—Ç—å –∫ XSS",
    "Access-Control-Allow-Origin": "CORS-–∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã",
    "Strict-Transport-Security": "Downgrade-–∞—Ç–∞–∫–∏ —á–µ—Ä–µ–∑ HTTP",
    "X-Frame-Options": "Clickjacking",
    "X-Content-Type-Options": "MIME-sniffing",
    "Referrer-Policy": "–£—Ç–µ—á–∫–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞",
    "Permissions-Policy": "–î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±—Ä–∞—É–∑–µ—Ä–∞",
    "X-XSS-Protection": "–ó–∞—â–∏—Ç–∞ –æ—Ç XSS (—É—Å—Ç–∞—Ä–µ–ª–æ, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º)",
}


def analyze_csp(csp_header):
    """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ CSP –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    warnings = []

    if not csp_header:
        return ["‚ùå CSP –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º unsafe-inline –≤ script-src
    if "'unsafe-inline'" in csp_header and "script-src" in csp_header:
        warnings.append("‚ö†Ô∏è CSP: unsafe-inline –≤ script-src —Å–Ω–∏–∂–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º unsafe-eval –≤ script-src
    if "'unsafe-eval'" in csp_header and "script-src" in csp_header:
        warnings.append("‚ö†Ô∏è CSP: unsafe-eval –≤ script-src —Å–Ω–∏–∂–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ default-src
    if "default-src" not in csp_header:
        warnings.append("‚ö†Ô∏è CSP: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç default-src")

    return warnings


def validate_url(url):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è URL"""
    if not url.startswith(('http://', 'https://')):
        url = 'https://' + url

    parsed = urlparse(url)
    if not parsed.netloc:  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ–º–µ–Ω–∞
        return None
    return url


def scan_headers(url):
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º URL
    normalized_url = validate_url(url)
    if not normalized_url:
        return {
            "target": url,
            "date": datetime.now().strftime("%Y-%m-%d %H:%M"),
            "headers": [],
            "issues": ["‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL —Ñ–æ—Ä–º–∞—Ç"],
            "error": True
        }

    result = {
        "target": normalized_url,
        "date": datetime.now().strftime("%Y-%m-%d %H:%M"),
        "headers": [],
        "issues": [],
        "security_score": 0,
        "total_headers": len(SECURITY_HEADERS),
        "error": False,
        "csp_warnings": []
    }

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º User-Agent —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        headers = {
            'User-Agent': 'Mozilla/5.0 (CORS Security Scanner)',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
        }

        response = requests.get(normalized_url, timeout=15, headers=headers, allow_redirects=True)
        response_headers = response.headers

        found_headers = 0

        for header, risk in SECURITY_HEADERS.items():
            header_value = response_headers.get(header)
            present = header_value is not None

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è CSP
            csp_warnings = []
            if header == "Content-Security-Policy" and present:
                csp_warnings = analyze_csp(header_value)
                result["csp_warnings"] = csp_warnings

            result["headers"].append({
                "name": header,
                "present": present,
                "value": header_value if present else None,
                "risk": risk,
                "warnings": csp_warnings if header == "Content-Security-Policy" else []
            })

            if present:
                found_headers += 1
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if header == "Access-Control-Allow-Origin" and header_value == "*":
                    result["issues"].append(f"‚ö†Ô∏è {header} = * ‚Äî –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤")
                elif header == "X-XSS-Protection" and header_value == "0":
                    result["issues"].append(f"‚ö†Ô∏è {header} = 0 ‚Äî –∑–∞—â–∏—Ç–∞ –æ—Ç XSS –æ—Ç–∫–ª—é—á–µ–Ω–∞")
                elif header == "Content-Security-Policy" and csp_warnings:
                    result["issues"].extend(csp_warnings)
            else:
                result["issues"].append(f"‚ùå {header} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî {risk}")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º security score
        result["security_score"] = int((found_headers / len(SECURITY_HEADERS)) * 100)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É
        if result["security_score"] >= 80:
            result["issues"].insert(0, "‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤!")
        elif result["security_score"] >= 60:
            result["issues"].insert(0, "‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        else:
            result["issues"].insert(0, "üö® –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

    except requests.exceptions.Timeout:
        result["issues"].append("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (–±–æ–ª–µ–µ 15 —Å–µ–∫—É–Ω–¥)")
        result["error"] = True
    except requests.exceptions.ConnectionError:
        result["issues"].append("üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∞–π—Ç—É")
        result["error"] = True
    except requests.exceptions.RequestException as e:
        result["issues"].append(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}")
        result["error"] = True
    except Exception as e:
        result["issues"].append(f"‚öôÔ∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        result["error"] = True

    return result