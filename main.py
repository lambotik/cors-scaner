#!/usr/bin/env python3
"""
CORS Scanner - –ö–æ–º–∞–Ω–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.

–ú–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç CLI –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ security-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤–µ–±-—Å–∞–π—Ç–æ–≤
—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.
"""

import argparse
import os
import sys
from typing import Optional
from scanner import scan_headers
from report_generator import generate_html_report
from report import save_report_to_file, print_report


def check_template() -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤.
    Raises:
        SystemExit: –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω
    Note:
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ templates/report.html –¥–ª—è Jinja2 —à–∞–±–ª–æ–Ω–æ–≤
    """
    template_path = "templates/report.html"
    if not os.path.exists(template_path):
        print("‚ùå –®–∞–±–ª–æ–Ω –æ—Ç—á—ë—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å: {template_path}")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞–ø–∫–∞ templates —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç report.html")
        sys.exit(1)


def validate_url(url: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ URL.
    Args:
        url (str): URL –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    Returns:
        bool: True –µ—Å–ª–∏ URL –≤–∞–ª–∏–¥–µ–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ URL
    if not url.startswith(('http://', 'https://')):
        print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω HTTPS")
        return True

    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é urllib.parse
    return True


def print_summary(results: dict, output_format: str, output_path: str) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
    Args:
        results (dict): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç scan_headers()
        output_format (str): –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ ('html', 'text', 'both')
        output_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞
    """
    print("\n" + "=" * 50)
    print("üìä –°–í–û–î–ö–ê –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    print(f"üéØ –¶–µ–ª—å: {results['target']}")
    print(f"üìÖ –í—Ä–µ–º—è: {results['date']}")
    print(f"üõ°Ô∏è  –û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {results['security_score']}%")
    print(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {results['total_headers']}")
    print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {len(results['issues'])}")
    print(f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {results.get('scan_duration', 'N/A')}—Å")
    print(f"üíæ –§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞: {output_format}")
    print(f"üìÅ –§–∞–π–ª –æ—Ç—á–µ—Ç–∞: {output_path}")
    print("=" * 50)


def setup_argparse() -> argparse.ArgumentParser:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
    """
    parser = argparse.ArgumentParser(
        description="CORS Scanner - –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤–∫–ª—é—á–∞—è CORS –ø–æ–ª–∏—Ç–∏–∫—É",
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  %(prog)s https://example.com
  %(prog)s https://api.service.com --format text  # –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS API
  %(prog)s https://site.com --format both --verbose
        """,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç - URL –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    parser.add_argument(
        "url",
        help="–¶–µ–ª–µ–≤–æ–π URL –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Å http:// –∏–ª–∏ https://)"
    )

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parser.add_argument(
        "--html",
        help="–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HTML-–æ—Ç—á—ë—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: report.html)",
        default="report.html"
    )

    parser.add_argument(
        "--format", "-f",
        choices=["html", "text", "both", "console"],
        help="–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –æ—Ç—á–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: console)",
        default="console"
    )

    parser.add_argument(
        "--output", "-o",
        help="–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: security_report.txt)",
        default="security_report.txt"
    )

    parser.add_argument(
        "--verbose", "-v",
        action="store_true",
        help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
    )

    parser.add_argument(
        "--timeout", "-t",
        type=int,
        default=15,
        help="–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 15)"
    )

    parser.add_argument(
        "--no-color",
        action="store_true",
        help="–û—Ç–∫–ª—é—á–∏—Ç—å —Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏"
    )

    return parser


def main() -> Optional[int]:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ CORS Scanner.
    Returns:
        Optional[int]: –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ (0 - —É—Å–ø–µ—Ö, 1 - –æ—à–∏–±–∫–∞)
    Side effects:
        - –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª—ã –æ—Ç—á–µ—Ç–æ–≤
        - –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª—å
        - –ú–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏
    """
    parser = setup_argparse()
    args = parser.parse_args()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not validate_url(args.url):
        return 1

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ (–¥–ª—è HTML –æ—Ç—á–µ—Ç–æ–≤)
    if args.format in ["html", "both"]:
        try:
            check_template()
        except SystemExit:
            return 1

    if args.verbose:
        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {args.url}")
        print(f"‚è∞ –¢–∞–π–º–∞—É—Ç: {args.timeout} —Å–µ–∫—É–Ω–¥")

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        results = scan_headers(args.url, timeout=args.timeout)

        if results.get("error"):
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:")
            for issue in results.get("issues", []):
                print(f"   {issue}")
            return 1

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        if args.format in ["html", "both"]:
            if args.verbose:
                print(f"üíæ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –æ—Ç—á–µ—Ç: {args.html}")
            try:
                generate_html_report(results, output_path=args.html)
                print(f"‚úÖ HTML –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {args.html}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML –æ—Ç—á–µ—Ç–∞: {e}")
                if args.format == "html":  # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ HTML - –≤—ã—Ö–æ–¥–∏–º —Å –æ—à–∏–±–∫–æ–π
                    return 1

        if args.format in ["text", "both"]:
            if args.verbose:
                print(f"üíæ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç: {args.output}")
            success = save_report_to_file(results, args.output)
            if success:
                print(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {args.output}")
            else:
                if args.format == "text":  # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç - –≤—ã—Ö–æ–¥–∏–º —Å –æ—à–∏–±–∫–æ–π
                    return 1

        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω explicitly)
        if args.format in ["console", "both"] or args.format == "console":
            print_report(results)

        # –í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏
        print_summary(results, args.format, args.html if args.format == "html" else args.output)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø—Ä–æ–±–ª–µ–º
        if results["security_score"] < 60 and len(results["issues"]) > 0:
            print("\nüö® –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
            critical_issues = [issue for issue in results["issues"]
                               if issue.startswith(("üö®", "‚ùå"))]
            for issue in critical_issues[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
                print(f"   {issue}")

        return 0

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1

    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        return 1


if __name__ == "__main__":
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.
    """
    exit_code = main()
    sys.exit(exit_code)
